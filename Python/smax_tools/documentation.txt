Develop
Updated on May 5, 2022
The Representational State Transfer (REST) API enables users with the proper role to access and update records or consume REST services from a task or business rules.

Overview of the REST API
Updated on Nov 24, 2021
The following API services are available:

Entity Management Service (EMS). Enables you to perform Create/Read/Update operations on records and manage records. See Record bulk update and collection APIs and REST API queries.
Analytics. Enables you to use reporting services to analyze your record data.
Manage Persons. Enables you to manage users and contacts.
Business Intelligence (BI). Enables you to integrate Service Management with a third-party business intelligence system.
Case Exchange. Enables you to exchange records with an external system.
Encryption domain. Enables you to manage encryption domains.
Comments. Enables you to post comments to records and access record comments.
User lock. Enables you to get the lock status of a user and lock or unlock a user.
Service Management only supports the public APIs documented in this section and doesn't support other APIs.

When entering characters in fields in REST calls, the following characters are invalid:

0x0 to 0x8
0xB to 0xC
0xE to 0x1F
0xD8 to 0xDFFF
0xFFFE to 0xFFFF
All characters after 0x110000

Connect to the REST API
Updated on Jun 30, 2022
The previous authentication API (/auth/authentication-endpoint/authenticate/login) is deprecated. We recommend that you change to the new API (/auth/authentication-endpoint/authenticate/token) based on the Access Token approach at your earliest convenience.
To connect and use the REST API, you must do all the following:
Set up a dedicated integration user for inbound integrations. For information about user types and how to create an integration user, see How to create a user.
Establish a user (login) session.
Each session must start with a call to the authentication endpoint:

Send a POST request to /auth/authentication-endpoint/authenticate/token by using the integration user to get a valid token.

The optional parameter TENANTID is omitted from the URI because the system automatically passes the tenant Id associated with the integration user to the authentication API.
The request body should include the user name and password in JSON format. For example:

{"login":"IntegrationUser@microfocus.com","password":"Password1"}
For more information, see Authentication endpoint service.

From the response, note the value of the token.

Ensure each subsequent request includes a cookie header:

SMAX_AUTH_TOKEN=%token%

In the header, replace %token% with the value of the token. The following figure shows an example.

For more information, see Authentication endpoint service.

If the request with a cookie header doesn't work, also include the tenant ID.

SMAX_AUTH_TOKEN=%token%;TENANTID=%tenantid%

Include in each request, the tenant ID.

In addition to the basic URL and record parameters, you must append the tenant ID.

For example:

Basic URL format: https://../incidents?filter=...

With tenant ID appended: https://../incidents?filter=...&TENANTID=123

If you are only creating a service that's used by non-browser clients, you can exclude from each request, the XSRF token.
If you need to use the XSRF token, you must do either of the following:
Provide a User-Agent HTTP header with the value Apache-HttpClient/<version>. The value must contain a version number, for example, Apache-HttpClient/4.1.

Send a token as an HTTP header named X-XSRF-TOKEN with the value taken from the latest XSRF-TOKEN cookie. (This is normal browser behavior.)

Authentication endpoint service
Updated on Jun 30, 2022
Before running any REST API, you must run an authentication API, which provides a token for the applications.

The previous authentication API (/auth/authentication-endpoint/authenticate/login) is deprecated. We recommend that you change to the new API (/auth/authentication-endpoint/authenticate/token) based on the Access Token approach at your earliest convenience.
To run the Access Token-based authentication API:

Enter the request with a POST command in the following format:

POST /auth/authentication-endpoint/authenticate/token?TENANTID=<tenant-id>

If you authenticate with an integration user, you can omit the ?TENANTID=<tenant-id> part in the URI. The system automatically passes the tenant Id associated with the integration user to the authentication API.
The request body should include the user name and password in JSON format. For example:

{"login":"demoUser@microfocus.com","password":"Password1"}

The response body contains the token for authentication.

Example:

oNY4MpMuxV4FVPQxq7JGwpTQer6Es6_umMk_tDmau18MmiNA5mmCpqA09Zdm3eB_zfNSC-w-DHCXoySi72HdDvKF2rjXhGVGjj1-kF5dArvMkqhjnQ_XIUp53jOhXHKIx1kTwFSkQhqk3mgFHARXsuLqMI1MCKIp_ynNFc0tYzQvEUs4gjiP3-QmGjVDbxk4yfUES_eiA_91mcW9xBcZ3UEkJFIcWsMjM9GJDMEoHdjRMmWiMOEFAU8pbEVxUg7L

Single record APIs
Updated on Sep 26, 2022
On this page
Request structure
Return structure
The only API implemented for single records is the Get record by ID API.

The syntax can be in the following formats:

The tenant ID is directly in the URL: https://<serverAddress>/rest/<tenant-id>/ems/<entity-type>/<id>?<layout>
The tenant ID is in a parameter: https://<serverAddress>/rest/<tenant-id>/ems/<entity-type>/<id>?<layout>&TENANTID=<tenant-id>
The customer domain has a domain mapping: https://<customer domain name>/rest/<tenant-id>/ems/<entity-type>/<id>?<layout>
where:

tenant-id represents the tenant ID. To access the tenant ID, right-click the Launch button next to the required product on MyAccount, select Copy link address and paste it into a browser. The tenant ID is the number following TENANTID=.

entity-type represents the logical name of the record to return. Example: incident.

id represents the ID of the record instance.

layout represents a part of the REST query specifications. It specifies the record properties to return.



The layout parameter is mandatory. For more information about the layout parameter, see Layout.
To get the record types (for the entity-type parameter), go to Administration > Configuration > Studio > Fields, select the record type from the drop-down list, and you can find the entity-type directly in the URL: https://<serverAddress>/admin/entity-editor/<entity-type>/property-grid-tab?TENANTID=xxxxx.
You can view the available properties (for the layout parameter) by selecting the required record type and going to the Fields tab. In the UI, the field displays as the Multilingual label, however, for the layout parameter, make sure you use the Name of the field. For example, the ImpactScope field in a request displays as Impact in UI because its Multilingual label is Impact, but to use it in the layout parameter, you need to use its Name, which is ImpactScope.
Request structure
Enter the following request URI:

https://<serverAddress>/rest/<tenant-id>/ems/Person/10548?layout=Name,Avatar

Or you can enter the request URI using the parameter format:

https://<serverAddress>/rest/1234/ems/Person/10548?layout=Name,Avatar&TENANTID=1234

If the customer domain has a domain mapping, you can enter the request URI as follows:

https://<customer domain name>.microfocus.com/rest/<tenant-id>/ems/Person/10548?layout=Name,Avatar

Return structure
The following is an example of the structure of the returned data in JSON format:

{
        "entities": [
                {
                        "entity_type": "Person",
                        "properties": {
                                "Name": "Ivey Dillard",
                                "Id": "10548",
                                "LastUpdateTime": 1385656386731
                        },
                        "related_properties": {}
                }
        ],
        "meta": {
                "completion_status": "OK"
        }
}

Record bulk update and collection APIs
Updated on Nov 29, 2023
On this page
Getting a record collection
Bulk Create/Update
Example: Bulk Create
Example: Bulk Update
Example: Clear the value in a field
Limitations
Bulk update APIs are highly recommended from a performance perspective because they reduce traffic and enable the EMS to optimize interaction with the database and increase its capacity.

Getting a record collection
To run an HTTP GET method for a collection, the following syntax is supported:

rest/<tenant-id>/ems/<entity-type>?<query-params>

Where:

tenant-id represents the tenant ID. To access the tenant ID, right-click the Launch button next to the required product on MyAccount, select Copy link address and paste it into a browser. The tenant ID is the number following TENANTID=.
entity-type represents the logical name of the record to return. Example: incident.
query-params represents query parameters compatible with the query language specifications.
Enter the following request URI:

https://<serverAddress>/rest/<tenant-id>/ems/Incident/11704?layout=SolvedTime,RegisteredForActualService,UserOptionsType,EntityModel,
Urgency,KnowledgeCandidate,ClosedByPerson,ExpectedResolutionTime,TasksExecutionPlanClassify,IncidentAttachments,MajorIncident,
TasksExecutionPlanInitialSupport,ImpactScope,Active,RequestedByPerson,
IsDeleted,Id,TasksWorkspace,CompletionCode,CloseTime,ExplicitStakeholders,TasksInternalData,
PhaseId,ProcessId,LastUpdateTime,RecordedByPerson,ExternalProcessReference,OwnedByPerson,
ServiceDeskGroup,ProblemCandidate,RegisteredForLocation,Solution,AssignedGroup,Escalated,
GlobalId,Description,LastUpdatedByPerson,TasksExecutionPlanEscalate,Priority,Name,
AllStakeholders,Status,Category,NextTargetTime,DisplayLabel,UserOptions,SolvedByPerson,
EmsCreationTime,TasksExecutionPlanValidate,AssignedPerson,FirstTouch
The following is an example of the structure of the returned data in JSON format:

{
        "entities": [
                {
                        "entity_type": "Incident",
                        "properties": {
                                "RegisteredForActualService": "10938",
                                "Urgency": "TotalLossOfService",
                                "IncidentAttachments": "{\"complexTypeProperties\":[]}",
                                "ImpactScope": "Enterprise",
                                "Active": false,
                                "RequestedByPerson": "10426",
                                "IsDeleted": false,
                                "Id": "11704",
                                "CompletionCode": "NoFaultFound",
                                "PhaseId": "Close",
                                "ProcessId": "normal",
                                "LastUpdateTime": 1388039152247,
                                "OwnedByPerson": "10620",
                                "ServiceDeskGroup": "10649",
                                "Solution": "Changed the fanTry reading the following article:
<a href=\"https://{serverAddress}/saw/ess/viewResult/13422\">BlackBerry</a><br><br>
<p>sdfgsdgsdg</p>",
                                "Description": "<p>Everyday around lunch time my PC starts
rebooting for no apparent reason. Can you please check what's wrong? I'm getting an error
message about CPU temperature.</p>",
                                "Priority": "CriticalPriority",
                                "Name": "IM000003",
                                "Status": "Complete",
                                "Category": "10707",
                                "DisplayLabel": "Computer reboots for no apparent reason",
                                "EmsCreationTime": 1385656925089
                        },
                        "related_properties": {}
                }
        ],
        "meta": {
                "completion_status": "OK"
        }
}
Bulk Create/Update
For executing a Create or Update command for a collection, the following syntax is supported for the request URI:

rest/<tenant-id>/ems/bulk

Where:

tenant-id represents the tenant ID. To access the tenant ID, right-click the Launch button next to the required product on MyAccount, select Copy link address and paste it into a browser. The tenant ID is the number following TENANTID=.
the request body includes the information of entity-type and query-params.
entity-type represents the logical name of the record to retrieve. Example: incident.
query-params represents query parameters compatible with the query language specifications.
If the entity-type is Request, make sure that the role that runs the API has "Log into the application" enabled through People > Roles > General.
A bulk processing request gets a JSON object which contains record and relationship data and an operation to process. A bulk may contain multiple record and relationship types but only a single operation.

The operation property specifies the bulk operation type. Supported values are: CREATE and UPDATE.

The record's JSON array contains the records to be processed. When processing an UPDATE operation, the EMS assumes that the provided properties are the subset of the record properties that need to be updated. Note that the Update JSON body must contain the "Id"; property to identify the entity to be updated. That is, you can't perform an UPDATE on an entity without providing the "Id" property.

The relationship's JSON array contains the relationships to be processed. Each relationship entry includes the following properties:

name. The name of the relationship (as defined in the metadata).
<FirstEndPoint-Name>. The name of the first endpoint record (as a string).
<SecondEndPoint-Name>. The name of the second endpoint record (as a string).
The bulk processing order isn't defined.


Example: Bulk Create
The following is an example of the structure of the bulk operation payload JSON format:

https://{serverAddress}/rest/{tenant-id}/ems/bulk
{
        "entities": [
                {
                        "entity_type": "Incident",
                        "properties": {
                                "ImpactScope": "SingleUser",
                                "Active": true,
                                "RequestedByPerson": "10073",
                                "PhaseId": "Log",
                                "ProcessId": "normal",
                                "FirstTouch": true,
                                "Urgency": "SlightDisruption",
                                "RegisteredForActualService": "10916",
                                "ServiceDeskGroup": "10646",
                                "CompletionCode": null,
                                "DisplayLabel": "Test_Incident",
                                "Priority": "LowPriority",
                                "Description": "<p>Test</p>"
                        }
                }
        ],
        "operation": "CREATE"
}
The following is an example of the structure of the bulk create operation result JSON format:

{
        "entity_result_list": [
                {
                        "entity": {
                                "entity_type": "Incident",
                                "properties": {
                                        "Id": "20036",
                                        "LastUpdateTime": 1388060910959
                                },
                                "related_properties": {}
                        },
                        "completion_status": "OK"
                }
        ],
        "relationship_result_list": [],
        "meta": {
                "completion_status": "OK"
        }
}
A bulk response body contains an aggregated completion_status, which represents the overall success of the bulk operation. The status is marked as OK only if all the contained operations were processed successfully.

In addition, the response body contains a JSON object for each request element (record or relationship) that failed to process, which represents the failed object with details. The response body JSON should be symmetrical to the request body, with records listed in one array and relationships in a separate one.

Example: Bulk Update
The following is an example of the structure of the bulk operation payload JSON format:

https://{serverAddress}/rest/{tenant-id}/ems/bulk
{
   "entities":[
      {
         "entity_type":"Contract",
         "properties":{
            "Id":"11104",
            "Vendor":"10080"
         }
      }
   ],
   "operation":"UPDATE"
}
The following is an example of the structure of the bulk update operation result JSON format:

"data": {
    "entity_result_list": [
      {
        "entity": {
          "entity_type": "Contract",
          "properties": {
            "LastUpdateTime": 1593499152727,
            "Id": "11104"
          },
          "related_properties": {}
        },
        "completion_status": "OK"
      }
    ],
    "relationship_result_list": [],
    "translation_result_list": [],
    "meta": {
      "completion_status": "OK",
      "correlationId": "RID-e92b34ac-8160-4186-8676-12e34502383d"
    }
  }
You can also use this API to add Many2Many relationships.

{"relationships":[{"name":"SystemElementAffectedByIncident","firstEndpoint":{"SystemElement":"<system elelemt id>"},"secondEndpoint":{"Incident":"<incident id>"}}],"operation":"CREATE"}
For example,

{"relationships":[{"name":"SystemElementAffectedByIncident","firstEndpoint":{"SystemElement":"11460"},"secondEndpoint":{"Incident":"13098"}}],"operation":"CREATE"}
Example: Clear the value in a field
To clear the value in a field by using Bulk Update, you must set the field to null. The following example will clear the value in the Vendor field.

{
   "entities":[
      {
         "entity_type":"Contract",
         "properties":{
            "Id":"11104",
            "Vendor":null
         }
      }
   ],
   "operation":"UPDATE"
}
Limitations
The following limitations apply to bulk requests:

A bulk request can only perform a single CREATE or UPDATE operation.
Records are processed one by one, to enable workflow rules on each record.

REST API collection query protocol
Updated on Feb 24, 2023
On this page
Collection filtering
Layout
Record-type
Ordering
Size
Skip
Show more
This section provides specifications for HTTP GET query parameters designed to be used with REST services APIs.

Collection filtering
The filter query parameter specifies a filtering condition for a resource collection. The service then returns only resources that meet the specified condition.

Logical operators

The following logical operators are supported:


View Fullscreen
Name	Description	Examples
Logical And	Evaluates to true if both the left and right operands evaluate to true, otherwise evaluates to false.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Id gt 1000 and Name eq 'Jake'&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Id > 1000 and Name = 'Jake'&layout=Id,Displaylabel,Priority
Logical Or	Evaluates to true if at least one of the left and right operands evaluates to true, otherwise evaluates to false.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Id gt 1000 or Name eq 'Jane'&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Id > 1000 or Name = 'Jane'&layout=Id,Displaylabel,Priority
Logical Not isn't supported. Specific operators have their own negation syntax. For example: “in” and “not in”, “=” and “!=”.

Comparison operators

Comparison logical operators evaluate to a boolean value depending on the operand values.

The following comparison operators are supported:


View Fullscreen
Name	Description	Examples
Equals	Evaluates to true if the left and right operands are equal, otherwise evaluates to false.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Rank eq 2&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Rank = 2&layout=Id,Displaylabel,Priority
Not equals	Evaluates to true if the left and right operands aren't equal, otherwise evaluates to false.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Rank ne 2&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Rank != 2&layout=Id,Displaylabel,Priority
Greater than	Evaluates to true if the left operand is greater than the right operand, otherwise evaluates to false.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Rank gt 2&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Rank > 2&layout=Id,Displaylabel,Priority
Greater or equal	Evaluates to true if the left operand is greater than or equal to the right operand, otherwise evaluates to false.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Rank ge 2&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Rank >= 2&layout=Id,Displaylabel,Priority
Less than	Evaluates to true if the left operand is less than the right operand, otherwise evaluates to false.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Rank lt 2&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Rank < 2&layout=Id,Displaylabel,Priority
Less or equal	Evaluates to true if the left operand is less than or equal to the right operand, otherwise evaluates to false.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Rank le 2&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Rank <= 2&layout=Id,Displaylabel,Priority
Between	Evaluates to true if the left-most operand is in the range defined by the two comma-separated operands in the parentheses, otherwise evaluates to false. The first operand in the parentheses represents the lower limit of the range and the second the upper limit.
Note: The lower and upper limits must be Unix timestamps.

http://<host>/rest/<tenant-id>/ems/<record-type>?filter=LastUpdate btw(1568934000000, 1568934000000)&layout=Id,Displaylabel,Priority
Not between	Evaluates to true if the left-most operand isn't in the range defined by the two comma-separated operands in the parentheses, otherwise evaluates to false. The first operand in the parentheses represents the lower limit of the range and the second the upper limit. Range boundaries are inclusive.
Note: The lower and upper limits must be Unix timestamps.

http://<host>/rest/<tenant-id>/ems/<record-type>?filter=LastUpdate not btw(1568934000000, 1568934000000)&layout=Id,Displaylabel,Priority
In	Evaluates to true if the left-most operand is equal to one of the expressions in the parentheses, otherwise evaluates to false.	http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Id in(1,2,3)&layout=Id,Displaylabel,Priority
Not in	Evaluates to true if the left-most operand isn't equal to any of the expressions in the parentheses, otherwise evaluates to false.	http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Id not in(1, 2, 3)&layout=Id,Displaylabel,Priority
Different expressions and data types might not have a strict definition of how they evaluate against one another, so the definition of how operators evaluate might become service dependent.

Arithmetic operators

The following arithmetic operators are supported:


View Fullscreen
Name	Description	Examples
Add	Evaluates to the result of the sum of the left operand to the right operand.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=PreviousRank gt (CurrentRank add 3)&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=PreviousRank > (CurrentRank + 3)&layout=Id,Displaylabel,Priority
Subtract	Evaluates to the value of the left operand minus the value of the right operand.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=PreviousRank gt (CurrentRank sub 3)&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=PreviousRank > (CurrentRank - 3)&layout=Id,Displaylabel,Priority
Multiply	Evaluates to the product of the left operand and right operand values.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=PreviousRank lt (CurrentRank mul 3)&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=PreviousRank < (CurrentRank * 3)&layout=Id,Displaylabel,Priority
Modulo	Evaluates to the remainder of the division of the left operand by the right operand.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Actual gt Planned and (Planned mod Actual) gt 5&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=Actual > Planned and (Planned % Actual) > 5&layout=Id,Displaylabel,Priority
Divide	Evaluates to the value of the division of the left operand by the right operand.
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=PlannedHours=PlannedDays div 10&layout=Id,Displaylabel,Priority
http://<host>/rest/<tenant-id>/ems/<record-type>?filter=PlannedHours=PlannedDays / 10&layout=Id,Displaylabel,Priority
Parentheses	Used around conditions and expressions to define priority.
https://<host>/rest/<tenant-id>/ems/<record-type>?filter=SupportDurationTime = (NumberOfAttachments add 1) mul (NumberOfAttachments sub 1)&layout=Id,DisplayLabel,Priority
https://<host>/rest/<tenant-id>/ems/<record-type>?filter=SupportDurationTime = (NumberOfAttachments add 1) * (NumberOfAttachments sub 1)&layout=Id,DisplayLabel,Priority
Unary plus	Syntax: +number
Unary minus	Syntax: -number
Layout
The layout query parameter specifies which properties or sub-structure of a data resource should be returned by a service. Similar to SQL, this parameter provides a comma-separated list of properties or multi-part properties.

Selecting Resource Properties. Specify the required properties according to the following syntax: http://<host>/rest/<tenant-id>/ems/<record-type>?layout=Id,Name,Description.

Selecting Related Resource Properties. Specify a relationship name and a property name according to the following syntax: http://<host>/rest/<tenant-id>/ems/Person?layout=PrimaryAddress.City.

Record-type
The record-type query parameter specifies the record type. To get this parameter, go to Administration > Configuration > Studio > Fields, select the record type from the drop-down list, and you can find the record-type directly in the URL: https://<serverAddress>/admin/entity-editor/<record-type>/property-grid-tab?TENANTID=xxxxx

Ordering
The order query parameter specifies the order in which the returned resources are placed. Similar to SQL, this parameter contains a comma-separated list of order expressions. Each order expression specifies a property name and a sort direction.

The following syntax is supported:

order=property-name desc | asc

Size
The size parameter specifies the maximum number of resources requested to be returned, and the default value is 250.

The following syntax is supported:

size=<integer>

Example: Return the first ten people with age lower than 30 in ascending order. Enter the following request:

http://<domain>/Person?layout=FirstName,LastName,Email&filter=Age<30&order=Age asc&size=10

Skip
The skip parameter specifies how many resources should be skipped by specifying the starting index of the returned result. When not specified, its default value is zero, such that the first resource returned from the data-store is the first resource returned by the queried service.

The following syntax is supported:

skip=<integer>

Example: Return people, starting from person number 51. Enter the following request:

http://<domain>/Person?layout=FirstName,LastName,Email&skip=50

Paging
Paging is achieved by the combination of the skip and size parameters.

Example: Return a page of 50 people starting from the first person. Enter the following request:

http://<domain>/Person?layout=FirstName,LastName,Email&order=Id&skip=0&size=50.

To return the next page (page = 2), enter the following request:

http://<domain>/Person?layout=FirstName,LastName,Email&order=Id&skip=50&size=50.

To return the next page (page = 3), enter the following request:

http://<domain>/Person?layout=FirstName,LastName,Email&order=Id&skip=100&size=50.

Metadata
The meta parameter allows clients to request metadata about the queried object and the request itself.

The following syntax is supported:

meta=<comma separated list of meta-data properties>

Example: Return people with age greater than 10, starting from person number 51. Include the total number of people that apply to the specified filter (totalCount) and the number of returned resources (Count). Enter the following request:

http://<domain>/Person?layout=FirstName,LastName,Email&skip=50&filter=Age>10&meta=totalCount,Count

The following are some common metadata attributes:


View Fullscreen
Name	HTTP Method	Retrieved	Description	Value Range
completion_status	Any	Always (based on service specifications)	A request completion status.
One of:

OK
Failed
Rejected
TemporarilyRejected
totalCount	GET	On Demand (based on service specifications)	The total number of resources that apply for the request (discards skip and size).	Integer
The following is an example of a JSON meta structure:

{
"meta": {
        "completion_status": "OK",
        "total_count": "1023",
        }
}
String literals
String literals can be used as expressions in query elements such as comparison condition on properties, function parameters and others. A string literal must always start and end with a single quote. If a single quote character is a part of the string itself, an additional single quote character must be added.

Example: The string Jimi’s new guitar should be passed as Jimi’’s new guitar.

Analytics REST API
Updated on Mar 28, 2022
This section provides specifications for Analytics REST services APIs. All Analytics REST Services URIs must conform to the following format:

<scheme://maas-address>/rest/<tenant>/analytics/[record-name]?filter

This analytics REST API does not query IDOL. It directly calls the EMS API to query records and its query format is therefore the same as that of the EMS API.

The only difference between the two REST APIs is that there's no limit on the number of query results returned by the analytics query API, whereas the query size of EMS API ranges from 4000 to 100000 that is controlled by a tenant setting in Suite Administration: MAX_EMS_RECORDS_PER_QUERY (10000 by default).

The Analytics REST API may be a good choice if you want to get more than 100000 results per query; however, the performance may be poor. For this reason, you may still want to use the EMS REST API instead of the Analytics REST API.

The Analytics REST API uses the same protocols defined for the EMS APIs in REST API collection query protocol.

EMS REST API
Updated on Nov 25, 2022
On this page
Introduction
Understanding the data structure of the API
Determining the entity type and field names
Handling specific field types
Enumerations
Entity links
Show more
Introduction
Service Management Automation X includes multiple REST APIs that may be used to execute a variety of commands. This document describes using the Postman client to access the EMS REST API. EMS stands for Entity Management System, and is used to access and modify information for most record types in SMA-X, such as incidents, requests, services, and configuration items.

Before using the information in this section it will be necessary to review the information found in the ‘Configuring and Using the Postman REST Client’ section of this guide. This section explains how to install the Postman client as well as how to find the master node and tenant Id for a specific Service Management Automation X instance.

This chapter will cover:

Understanding the data structure of the API
Determining the entity type and field names
Handling specific field types
Special considerations of the EMS API
Locking system -- service behavior
Retrieving information from Service Management Automation X
Posting information to Service Management Automation X
Determining entity type and field names
Understanding the data structure of the API
The Service Management Automation X EMS REST API uses the JSON data format to exchange data with a client. Information on the JSON format may be found here.

If your intent is to use a tool such as Microsoft Excel to view the information returned from the REST API, you will need to convert the data returned from Service Management Automation X using some type of scripting or other data conversion process. There are a variety of conversion tools on the web that will transform JSON into CSV (or vice versa). You could use one of these tools to convert the information in a spreadsheet to the JSON format required by the Service Management Automation X REST API.

An example of the JSON returned from the Service Management Automation X EMS REST API can be seen in the image below (please note that the image does not show the entire result returned by the API). The returned result is made up of multiple entities (records) from Service Management Automation X. In each returned record, the entity_type value specifies the type of record (in this example each entity is a ‘Request’). The properties section contains the attributes of the entity. The exact attributes returned are dependent on the query used to request the information. Finally, the related_properties shows information from other records that are linked to the requested entity. Again, the information included here is dependent on the initial request.

REST Image2.png

When sending (posting) information to Service Management Automation X, the data format needs to be in the same JSON format. The following image is an example of how to create a Request in Service Management Automation X using the EMS REST API. The entity_type needs to be set to the desired record type, and when posting information you must also specify the type of operation (such as CREATE or UPDATE). In this example, we set the operation to ‘CREATE’ in order to create a new request. Attributes for our new Request are set in the properties section. To add more fields to the request, simply add the field name in quotes, a colon, and the value for the field (again in quotes). For example, to set a status you would add ‘Status’, the ‘:’, and the value ‘RequestStatusReady’. Each attribute must be separated with a comma, but there is no comma after the last specified attribute.

REST Image3.png

Determining the entity type and field names
All entity types can be updated using the EMS API (as long as you have a role that allows updating that specific entity type). In order to create or modify a specific field in an entity, you must know both the entity type and the field name. This information can be found in the Service Management Automation X interface. Navigate to the ‘Studio’ utility (select Administration > Studio from the main menu) and find the correct entity type using the field in the top left section of the form. The entity name displayed here is the correct entity type that is used in the REST request.

The field name can be found in the ‘Fields’ tab of the entity definition. It is important to use the value in the “Name” column of the fields list and not the ‘Multilingual label’ column.

Handling specific field types
It is also important to note the logical type of the field in question. There are certain types of fields that need special consideration. These types (and how to use them correctly in the API) are defined below.

Enumerations
If the field in question has a Logical type of ‘ENUM’, which is an enumeration, you must pass the internal name of the enumeration value rather than the display name. To find the name, open the list in the List management interface, which will display both the internal name and display name of each list value. For example, in the list shown in the image below, the status value for ‘Ready’ would be ‘RequestStatusReady’.

The body of a REST request that would update the request with a status of ‘Ready’ is shown in the following image:

ems Image4b.png

Entity links
If the field type is an entity_link (a link to a related entity/record) type field you must specify the unique id of the related record in the REST API (rather than any display name or value). Therefore you must determine what the id is and incorporating that value into the REST call. In the example below, the user wants to set the assignment group in a request to ‘Accounting’. To do this the user will first find the id of the accounting group and then set the ‘AssignedToGroup’ field in the request to the Id of the accounting group in the rest payload. The id may be found by viewing the related record directly or viewing a list that includes the related record.

ems Image7b.png

Then the id is entered for the ‘AssignedToGroup’ attribute in the body of the REST request.

REST 5.png

Date/time
If the field is a date or date_time you must specify the value using a Unix timestamp. Most scripting tools are capable of converting user-friendly date/times to Unix timestamps. Additionally, there are a number of online tools that can create these timestamps, including the one found here. Service Management Automation X requires that you define the timestamp down to the millisecond.

REST 6.png

Images
To add an image to a rich text field through API, add the image as an attachment, and then run REST API as shown below:



Note: Make sure the RequestAttachments is present, otherwise the image will go missing.

Special considerations of the EMS REST API
The EMS REST API has a few special considerations that must be followed:

A query will fail if the result returns more than the Maximum query size defined in Suite Administration (default value is 10K records)
The API returns results in batches of 250 records at a time by default, which you can modify by using the “size” parameter. Information on the skip parameter below.
When querying for fields that are entity links, the API returns the id of the related record (rather than the display label).
The maximum size of a request body is 1 MB. If the body size is larger than 1 MB, a "413 Request Entity Too Large" error will occur.
Locking system – service behavior
The EMS data engine implements an optimistic locking system to prevent clients from accidentally overwriting each other’s data. Without appropriate validation, two clients can retrieve the same record, edit it and send it to the server for update. One of the changes is committed first and the second one overwrites the record. The optimistic locking approach checks the version or timestamp of the record when it arrives and only allows updates on it if the incoming version isn't lower than the version currently stored in the database.

When a record is received for update, if it doesn't pass the optimistic locking version validation, the transaction fails. In such cases, the REST API returns HTTP status code 409. In case of a bulk API, the 409 status is returned in the body of the response, inside the JSON which represents the corresponding record result.



To use this locking system, the incoming record must include the LastUpdateTime property with the value assigned to it when it was retrieved from the server.
The locking system isn't relevant to the Analytics REST API.
Retrieving information from Service Management Automation X
The EMS API can retrieve any information available to the entity grid (list of records) in the Service Management Automation X user interface. Parameters are available to the REST request that allow you to apply specific Filters to the query, as well as specify which fields should be included in the returned result. Results are returned in the JSON data format, so you may need to use scripting or some data conversion process in order to get the data in the desired format.

The following is an example of a ‘Get’ request that will retrieve results from Service Management Automation X. In the example, the Id, DisplayLabel, and Priority fields are being returned for request entities.

The request URL is created as follows:

https://<host>/rest/844143557/ems/Request?layout=Id,DisplayLabel,Priority

The URL is created with the following information:

https:// — specifies the protocol to use
msast002pnqx.domain.com — the domain of the Service Management Automation X server master node which hosts the specific tenant
rest — specifies the use of the REST API
844143557 — the tenant ID of the desired Service Management Automation X instance
ems — specifies the use of the EMS REST API
Request — The entity type
?layout=Id,DisplayLabel,Priority — specifies the comma-delimited list of fields from the entity that should be included in the response (note that the LastUpdateTime field is always returned)
REST 7.png

The end of the query result will also return the number of records that matched the query, if the total count is more than 250, the skip command is required to display additional records after the first 250. In the example below the ‘&skip=250’ parameter is added to retrieve the additional records. In cases where you expect more than 250 records to be returned, writing a script or code to process the queries and results is recommended.

REST Image11.png

The URL to skip the first 250 records of the query is: https://<host>/rest/844143557/ems/Request?layout=Id,DisplayLabel,Priority&skip=250

REST 8.png


Filtering can be applied to any query sent through the REST API. The filter is specified as a parameter in the REST URL. In the example below, the results will be filtered based on the creation time of the entity using the parameter ‘filter=CreateTime+btw+(1466406000000,1466492399999)’ (note the use of the Unix timestamp).

https://<host>/rest/844143557/ems/Request?filter=CreateTime+btw+(1466406000000,1466492399999)&layout=Id,DisplayLabel,Priority

REST 9.png

Posting information to Service Management Automation X
Any type of standard entity can be created or updated in Service Management Automation X using the EMS REST API. The URL to post data for all entity types is https://<host>/rest/<tenantid>/ems/bulk. The type of entity being sent is defined in the entity_type field. In the example below a request will be created.

REST 10.png

To create an Incident the following payload would be used:

REST 11.png

To update an existing record the same process is used, but the Id of the entity is required and the operation would be ‘UPDATE’.

REST 12.png

To update an existing record by adding information to a field that is not currently populated just add the name of the field and value. Also note that multiple entities can be updated at the same time, as shown in the following example.

REST 13.png

REST API queries
Updated on Apr 28, 2022
On this page
Retrieving related record properties
Retrieving related records
Retrieving grouped aggregated record data
Filtering based on related record properties
Query language extensions
You can use the Entity Management Service (EMS) REST API to run a variety of queries to retrieve information from the system. For more information about the EMS REST API, see EMS REST API.
You can use the REST API in connection with the Query Language. For a reference of Query Language operators and commands, see REST API collection query protocol.

Retrieving related record properties
The EMS REST API enables you to query for properties defined on related records.

Example: Consider the following pseudo meta-model:

Entity:Incident {
        Property: Id
        Property: Name
        Property: Owner->IncidentOwner
}
Entity:User {
        Property: Id
        Property: Name
        Property: Email
}
Relationship:IncidentOwner {
        From: Incident
        To: User
}
and the following REST call:

HTTP GET: /rest/<tenant-id>/ems/Incident?layout=Id,Status,OwnedByPerson,OwnedByPerson.Name,OwnedByPerson.Email

where tenant-id represents the tenant ID. To access the tenant ID, right click the Launch button next to the required product on MyAccount, select Copy link address and paste it into a browser. The tenant ID is the number following TENANTID=.

You can see the following result:

{
        "entities": [
                        {
                "entity_type": "Incident",
"properties": {
                                        "Id": "12226789",
        "Status": "Open",
                                        "Owner": "123651234"

},
"related_properties" : {
                                        "Owner": {
                                                "Name": "Jimi",
                                                "Email": "jimi@microfocus.com"
                                        }
}
}
],
"meta": {
"completion_status": "OK",
        }
}
Retrieving related records
This section refers to the EMS query API for querying entities based on relationships and paths to another record type.

The EMS supports a generic API for retrieving entities based on relationships or paths and a specific record ID. This API supports all relationship types (one to many, many to many, and one to one) in both directions.

Example 1 (changes caused by incident): Return all the changes caused by the Incident with Id=<id> via the ChangeCausedByIncident relationship. Enter the following request URI:

HTTP GET: rest/<tenant-id>/ems/Incident/<id>/associations/ChangeCausedByIncident/?<query-params>

Example 2 (incidents caused by change): Return all the Incidents caused by changes with Id=<id> via the IncidentCausedByChange relationship. Enter the following request URI:

HTTP GET: rest/<tenant-id>/ems/Change/<id>/associations/IncidentCausedByChange/?<query-params>

When using the association API, if the current entity in the many-to-many field is target entity and the field's opposite name is not null, you need to use the opposite name to search associations.

For example, you want to get the association of "SystemElementAffectedByProblem." To do this, first go to check this property of Problem in Studio, Problem is the target record type of this field.



Then, go to the System Element record type to check this field.


The opposite name is not null. So the association API needs to use:
ems/Problem/11061/associations/ProblemAffectsSystemElement?layout=Id



Retrieving grouped aggregated record data
The EMS supports basic, generic grouping and aggregation of record data, based on the meta-model, similar to the row-data APIs. This API supports basic aggregation functions on filtered record data, using the same filtering semantics specified for the row-data APIs.

The EMS doesn't support aggregation functions without grouping.

Supported functions

The EMS supports the following aggregation functions:

count
sum
avg
min
max
Supported Query Parameters

The EMS API supports the grouping of aggregated results, similar to the SQL GROUP BY feature and with the same semantics.


View Fullscreen
Name	Description	Example
layout	Similar to the standard query protocol with the addition of aggregation functions. Group parameter must list Listed property names as well.
layout=Category,Name,Sum(Rank),Count(Name)

group	Defines ordered aggregation groups with the same semantics as in SQL. Layout section must list all grouping properties.
group=Name,Category

filter	Filters the population of the entities. Uses the same semantics as the records API filters.
filter=Status=‘In Progress’

order	Orders the returned data set by the specified expression. The expression can be a property or a function expression specified in the layout section.
order=Sum(Rank) desc,Name

skip	Uses the same semantics as the generic protocol.
skip=30

size	Uses the same semantics as the generic protocol.
size=30

Example: Return the sum of all incidents grouped by priority category ID and category display label. Enter the following request URI:

rest/<tenant-id>/ems/Incident/aggregations

where tenant-id represents the tenant ID. To access the tenant ID, right click the Launch button next to the required product on MyAccount, select Copy link address and paste it into a browser. The tenant ID is the number following TENANTID=.

The full request is as follows:

HTTP GET:https://<serverAddress>/rest/<tenant-id>/ems/Incident/aggregations?filter=Active+%3D+'true'&group=Priority, Category.Id,Category.DisplayLabel&layout=Priority,Category.Id,Category.DisplayLabel,Count(Id)

The response body appears as follows:

{
"Results": [
{
"Properties": {
"Priority": "HighPriority"
},
"RelatedProperties": {
"Category": {
"DisplayLabel": "Hardware",
"Id": "10667"
}
},
"Aggregations": {
"Count": {
"Id": 2
}
}
},
{
"Properties": {
"Priority": "CriticalPriority"
},
"RelatedProperties": {
"Category": {
"DisplayLabel": "Desktop Support",
"Id": "10707"
}
},
"Aggregations": {
"Count": {
"Id": 1
}
}
},
{
"Properties": {
"Priority": "LowPriority"
},
"RelatedProperties": {
"Category": {
"DisplayLabel": null,
"Id": null
}
},
"Aggregations": {
"Count": {
"Id": 16
}
}
},
{
"Properties": {
"Priority": "LowPriority"
},
"RelatedProperties": {
"Category": {
"DisplayLabel": "Access (Accounts & Passwords)",
"Id": "10663"
}
},
"Aggregations": {
"Count": {
"Id": 5
}
}
}
],
"meta": {
"completion_status": "OK",
"errorDetails": null,
"total_count": null,
"correlation_id": null
}
}
Filtering based on related record properties
The EMS supports filtering based on related record properties.

Filtering based on many to one record properties

Build conditions on related record properties using the DOT notation, similar to the approach specified in the Retrieving related record properties section.

Example: Return the Id and Summary of all Incidents that the user named Jimi owns. Assuming Owner is a reference property of a user. Enter the following request URI:

HTTP GET: rest/<tenant-id>/ems/Incident?layout=Id,Summary&filter=Owner.Name=’Jimi’

Filtering based on many to many record properties – vector conditions

The EMS query language supports filtering based on related record properties, typically using a relationship name, but also using paths, as defined in the metadata. The query language supports all relationships (one to many, many to many, and one to one).

You can combine filter conditions on related records with conditions on the queried records using logical conditions.

Query language supports the following syntax:

notexists? IDENTIFIER [condition?]

where:

notexists represents an operator which evaluates to true when the following vector condition is empty.

IDENTIFIER represents a relationship or path name.

condition represents a filter that filters the vector according to a condition based on the properties of the related record.

Example 1 (inclusive): Return the Ids of all articles read by all users named Jimi. Enter the following request URI:

HTTP GET: rest/<tenant-id>/ems/Article?layout=Id&filter=ArticlesToReaders[Name=’Jimi’]

Example 2 (exclusive): Return the Ids of all articles that not read by any user named Jimi. Enter the following request URI:

HTTP GET: rest/<tenant-id>/ems/Article?layout=Id&filter=notexists ArticlesToReaders[Name=’Jimi’]

Query language extensions
For a reference of Query Language operators and commands, see REST API collection query protocol.

Wild-card string matching conditions

The EMS REST query protocol supports the starts with condition for properties of type string with the following syntax:

IDENTIFIER startswith(STRING_LITERAL)

or

IDENTIFIER sw(STRING_LITERAL)

where:

STRING_LITERAL represents a string literal wrapped with single quotes. Note that if a single quote character is a part of the string literal itself, add an additional single quote character. Example: Pass the string Jimi’s new guitar as Jimi’’s new guitar.

Example: Return the Ids of all people whose first names start with Sh. Enter the following request URI:

HTTP GET: rest/<tenant-id>/ems/Person?layout=Id&filter=FirstName startswith(’Sh’)

Unassigned/Null property conditions

The EMS REST query protocol supports null expressions in conditions. As in many programming languages, null expressions represent unassigned or empty values.

Query language supports the following syntax:

IDENTIFIER = null

where:

IDENTIFIER represents a record property name.

Example: Return the Ids of all people whose owner isn't set to a value. Enter the following request URI:

HTTP GET: rest/<tenant-id>/ems/Person?layout=Id&filter=Owner = null

Restrictions and limitations

Beyond the standard query language, the EMS has some limitations and restrictions regarding the usage of its APIs:

Low Selectivity Filter Conditions. For performance reasons, the EMS may be unable to process record queries that contain low selectivity filters. Low selectivity filters are filters that contain no inclusive conditions.

Low selectivity filter conditions include:

notexists type vector conditions
Not equals (!= or ne) conditions
Null comparison condition (X = null)
Ordered Query Total Size Limit. The limit for queries that specify order is 4,000 records in total size. If an ordered collection query returns more than 4,000 records, the service returns an error.

Query size parameter. All collections must include a size restriction. If the size query parameter isn't specified, it's automatically set to 100, meaning that the query won't return more than 100 records.

Query layout parameter. GET operations requires query layout parameter and doesn't support wildcard characters. You must explicitly request any property that you expect the service to return.

Properties returned In collections. You can not retrieve properties of type text and complex-type within a collection. To retrieve such properties, you must issue a single record request. This limitation prevents extreme page sizes that can cause performance problems, both for network bandwidth and memory consumption reasons.

Manage Persons API
Updated on Mar 17, 2023
On this page
Manage Persons API URL
Configuring the upnDataType field
Configuring the AuthenticationType field
Create/Update/Delete users JSON structure
Create/Update contacts JSON structure
Get job status JSON structure
Show more
The Manage Persons API enables you to create, update, and delete users in Suite Administration and sync them with Service Management. The Manage Persons API is a bulk create/update/delete API. A bulk processing request gets a JSON object that contains record data and an operation to process. A bulk may contain multiple records and relationship types but only a single operation.

The JSON for the Create operation must contain the following mandatory properties for each record:

Upn
First name
Last name
Email
For the Update and Delete operations, only Upn is mandatory. You can also create and update contacts directly in Service Management. In addition, you can use the Manage Persons API to assign roles, groups, and licenses for the created users by including this information in the JSON. The API supports all the properties of the Person record type.



The Manage Persons API and the user auto-sync functionality must not be used at the same time; otherwise, it will cause unexpected behavior. Therefore, you need to temporarily turn off user auto-sync (Suite Administration > Accounts > Account details) when using the Manage Persons API to import users in batch, and then turn it back on after the batch operation is completed.
We don't support updating user-related properties to empty by using the Manage Persons API.
The Manage Persons API is a two-step process. Calling the Manage Persons API only triggers a backend job. After that, always use the Manage Persons Job Status API to check the job status, which will tell you if it completes successfully or with errors.
Manage Persons API URL
The Manage Person API URL uses the format: https://<External Access Host>/rest/<tenant ID>/ums/managePersons. To access the API using the Postman REST client, set the action to "POST" and enter the URL, then add the relevant information to the body of the request.

manage persons 1.png

Configuring the upnDataType field
The Manage Person API uses the UPN field to identify person records. The UPN field is a unique identifier and is by default the email address of the person. In some cases, this isn't the desired behavior. If the email isn't going to be the UPN, you need to use the upnDataType field on every use of the Manage Person API to post data. In the JSON payload, the field name should appear as: "upnDataType":"Customer_UID".

Configuring the AuthenticationType field
The "AuthenticationType": "LDAP" command in the JSON structure configures the authentication type for user onboarding. The authentication type property can only be included in the Create operation. The following four values are supported:

DB: User credentials are stored in IdM. This value is used by default if you don't include authentication type property in Create operation.
LDAP: User credentials are stored in LDAP servers.
SAML: User credentials are stored in federated identity providers supporting SAML. You can also use FEDERATION but SAML is recommended.
OAUTH: User credentials are stored in federated identity providers supporting OAUTH.
Make sure that you set the authentication type property correctly in the Create operation. Otherwise,  DB users will be created by default. If you want to change the authentication type later, you need to do it manually by selecting users in Suite Administration > Users, and then click the Change authentication type button. By default, you can see 250 users in the user list, but if you scroll down, you can see and select more users.
Create/Update/Delete users JSON structure
The request is followed by a JSON containing the operation and user information.

For the Create or Update operations, the JSON appears as follows:

{
     "operation": "CREATE_OR_UPDATE",
     "users": [
         {
                 "upnDataType": "Customer_UID",
             "properties": {
                 "FirstName": "Robert",
                 "LastName": "Johnson",
                 "OfficePhoneNumber": "1234",
                 "MobilePhoneNumber": "9876543",
                 "HomePhoneNumber": "9876543",
                 "Upn": "u5627927",
                 "Manager": "susan.white@example.com",
                 "Location": "Europe",
                 "CostCenter": "56232344",
                 "Email": "robert.johnson@example.com",
                 "AuthenticationType": "LDAP"
             },
             "roles": {
                 "REPLACE": [
                     "role1",
                     "role2"
                 ]
             },
             "licenses": {
                 "REPLACE": [
                     {
                         "type": "Premium edition concurrent user",
                         "capacity": "5"
                     },
                     {
                         "type": "Express edition named user",
                         "capacity": "15"
                     }
                     {
                         "type": "Express edition concurrent user",
                         "capacity": "5"
                     },
                 ]
             },
             "groups": {
                 "REPLACE": [
                     "GroupA@example.com",
                     "GroupB@example.com"
                 ]
             }
         },
         {
             "properties": {
                 "FirstName": "Charles",
                 "LastName": "Walker",
                 "OfficePhoneNumber": "9876",
                 "MobilePhoneNumber": "",
                 "Upn": "charles.walker@example.com",
                 "Manager": "susan.white@example.com",
                 "Location": "Poland",
                 "CostCenter": "56232344",
                 "Email": "charles.walker@example.com"
             },
             "roles": {
                 "REPLACE": [
                     "role3",
                     "role4"
                 ]
             },
             "licenses": {
                 "REPLACE": [
                     {
                         "type": "Premium edition named user",
                         "capacity": "5"
                     }
                 ]
             },
             "functionalGroups": {
                 "REMOVE": [
                     "GroupA@example.com",
                     "GroupB@example.com"
                 ],
                 "ADD": [
                     "GroupC@example.com"
                 ]
             },
             "orgGroup": {
                 "ADD": "GroupD@example.com"
             }
         }
     ]
 }

We recommend that you create or update 10 to 20 users in one API call.

When you use the CREATE_OR_UPDATE operation, the following rules are applied.

If the user exists in Suite Administration, the API updates the user's properties.
If the user doesn't exist in Suite Administration, the API creates the user in Suite Administration and syncs it to Service Management.
Additional data, such as roles, groups, and licenses are assigned to users in Service Management.
To remove a specific field value, you can use an empty string as the value for this field in JSON in the Update operation.

There are two options for assigning groups to users:

You can add organizational groups and functional groups separately, using orgGroup and functionalGroups respectively for each section. You can assign multiple functional groups but only one organizational group.
You can add all groups together, using groups.
For the roles, groups, and licenses, the following commands are supported:

ADD
REMOVE
REPLACE
The ADD and REMOVE commands cannot be used along with the REPLACE command.

In the above example, the upnDataType for the first user is set to customerUID. This assigns the value in the UPN property to the customerUID field of the user created in Suite Administration. The value in the Email property is assigned to the login name for the user in Suite Administration.

For the second user, the upnDataType isn't specified. In this case, the value in the UPN property is assigned to the login name for the user created in Suite Administration. The customerUID field for the user is empty.

The additional data that's updated in Service Management can be referenced by an alias. For any person or group, the API attempts to identify the record by its Upn. If no such record is found, it attempts to find a record with a matching record ID. For a location, if the API doesn't identify the location by its name, it attempts to find a location with a matching record ID.

If a user was created or updated in Suite Administration and synced successfully to Service Management, but an error occurred when assigning additional data, the user remains in Suite Administration and Service Management. The status in the result will indicate exactly where the failure occurred.

For DELETE operations, the JSON appears as follows:

{
    "operation":"DELETE",
    "users": [
        {
            "properties": {
                "Upn": "michael.brown@example.com"
            }
        },
        {
            "properties": {
                "Upn": "lauren.davis@example.com"
            }
        }
    ]
}
The Delete operation deletes the user from Suite Administration and IdM.
If the authentication type is LDAP or FEDERATION, make sure that the user is already deleted from your LDAP server. Otherwise, the user will be added back to Suite Administration by LDAP synchronization.
The API deletes the user from Suite Administration, and the user becomes a contact in the tenant.
For Create, Update, and Delete operations, the response JSON contains an ID for the operation:

{
“JobID”=”5654”
}
To view the status of the operation, see the Get job status JSON structure section.

Create/Update contacts JSON structure
The JSON for the Create contacts operation must contain the following mandatory properties for each record:

Upn
First name and/or Last name and/or Name
IsMaasUser must be set to FALSE
You can assign roles to a contact, but contacts cannot be assigned to groups or granted licenses.

The request is followed by a JSON containing the contact information. The JSON appears as follows:

{
"operation": "CREATE_OR_UPDATE",
"users": [
{
"upnDataType": "Customer_UID",
"properties": {
"IsMaasUser": "FALSE",
"FirstName": "Robert",
"Upn": "u5627927",
"Email": "robert.johnson@example.com"
},
"roles": {
"REPLACE": [
"role1",
"role2"
]
}
},
{
"properties": {
"IsMaasUser": "FALSE",
"LastName": "Walker",
"Upn": "charles.walker@example.com"
},
"roles": {
"REPLACE": [
"role3",
"role4"
]
}
}
]
}
All the contacts in the bulk are created or updated in Service Management.

The additional data that's updated in Service Management can be referenced by an alias. For any person, the API attempts to identify the record by its Upn. If no such record is found, it attempts to find a record with a matching record ID. For a location, if the API doesn't identify the location by its name, it attempts to find a location with a matching record ID.

It's possible to send both users and contacts in the same JSON. The contacts are processed directly in Service Management and the users are added in Suite Administration and synced to Service Management.

The response JSON contains an ID for the operation:

{
“JobID”=”5654”
}
To view the status of the operation, see the Get job status JSON structure section.

Get job status JSON structure
After the Create, Update, or Delete operation, run the following GET request URI to check the job status:

https://<External Access Host>/rest/<tenant>/ums/managePersonsJobStatus/<JOB_ID>

where JOB_ID is the value returned by the Manage Persons API.

The response JSON contains the bulk status. The following are the possible bulk status values:

RUNNING or PENDING. The API is still in progress.
SUCCESS. The API completed successfully. All users were created, updated, or deleted without errors.
FINISHED WITH ERRORS. The API completed with at least one error. At least one user was created in Suite Administration.
FAILED. The API failed. No users were created, updated, or deleted.
For individual users, the following are the possible status values:

FINISHED WITH ERRORS. The user was created in Suite Administration but the record properties, roles, licenses, or groups were not updated.
FAILED. The user was not created, updated, or deleted.
The following is an example of the structure of the response JSON for the FINISHED WITH ERRORS bulk status:

{
"BulkStatus": " FINISHED_WITH_ERRORS",
"Results": [
{
"Upn": "charles.walker@example.com",
"Status": " FINISHED_WITH_ERRORS",
"ErrorMessage": "Failed to set licenses for the user because a license with type: [Premium edition concurrent user] and capacity: [10] doesn't exist"
}
]
}
If you get an error message similar to the example above, contact the tenant admin to reassign the license to that user.

The following is an example of the structure of the response JSON for the FAILED bulk status:

{
"BulkStatus": " FAILED",
"Results": [
{
"Upn": "robert.johnson@example.com",
"Status": " FAILED",
"ErrorMessage": "Family name cannot be empty"
}
]
}
Notes and limitations
The following notes and limitations apply to the Manage Persons API:

The maximum bulk size supported is 100 users.
A bulk cannot contain more than one entry for the same Upn.
If the tenant includes more than one active license of the same type and capacity, the user is assigned the first of those licenses.
By default, the maximum number of records for provisioning users is 200,000. Your operation cannot be performed if this limit is reached. A scheduled job is run daily to delete the records older than 5 days. If needed, you can also manually clean up the ProvisionUsersState_<tenant_id> table in the xservices_rms database.
Sample usage
Adding a contact
When adding a person to Service Management, it's important to determine whether they should be added as a contact or a user. The difference is that a user has the right to log in to the system whereas a contact doesn't.

To add a contact, enter all desired attributes and then add the “IsMaasUser”: “false” flag. If IsMaasUser isn't set to false the system will create a user instead of a contact.

{
	"operation": "CREATE_OR_UPDATE",
	"users": [{
		"properties": {
			"Upn": "MyNewUser@example.com",
			"Email":"MyNewUser@example.com",
			"FirstName":"My First Name",
			"LastName":"My Last Name",
			"Location":"London",
			"IsMaasUser":"false",
			"OfficePhoneNumber":"867-5309",
			"EmployeeNumber": "4815162342"
		}
	}]
}
The following image shows how the REST call to add a contact would be performed in the Postman client:

manage persons 2.png

Updating a contact
To update a contact using the Manage Person API, simply create a REST payload with the desired attributes that also includes the UPN associated with the person. It's important to always include the "IsMaasUser":"false” flag when updating a contact or Service Management will attempt to convert the contact into a user.

{
"operation": "CREATE_OR_UPDATE",
	"users": [{
		"properties": {
			"Upn": "MyNewUser@example.com",
			"IsMaasUser":"false",
			"EmployeeNumber": "45555555"
		}
	}]
}
The following image shows how the REST call to update a contact would be performed in the Postman client:

manage persons 3.png

Adding a user
Adding a user is very similar to adding a contact. However, users also get an account created in the Suite Administration portal so that they can log in to Service Management. To create a user that can log in to Service Management, add all the required attributes but don't include the IsMaasUser field. If a record with the same unique identifier (UPN) exists, Service Management updates the record. If a contact exists then it's converted into a user. If no record exists, a new user record is added. The authentication type property can only be included in the Create operation. For more details about authentication type, see the Configuring the AuthenticationType field section of this topic.

{
	"operation": "CREATE_OR_UPDATE",
	"users": [{
            "upnDataType":"Customer_UID", #(only if custom Upn and not Email)
		"properties": {
			"Upn": "MyNewUser@example.com",
			"Email":"MyNewUser@example.com",
			"FirstName":"My First Name",
			"LastName":"My Last Name",
			"Location":"London",
			"OfficePhoneNumber":"867-5309",
			"EmployeeNumber": "4815162342",
            "AuthenticationType": "LDAP"
		}
	}]
}
Updating a user
Similar to updating contacts, the UPN field is used to search for an existing user. If one is found that record is updated, otherwise a new record is added. Using the body shown below would update the employee number of a user in Service Management and also in the Suite Administration portal.

{
	"operation": "CREATE_OR_UPDATE",
	"users": [{
            "upnDataType":"Customer_UID", #(only if custom Upn)
		"properties": {
			"Upn": MyNewUser@example.com,
			"EmployeeNumber": "4456234"
		}
	}]
}
Assigning groups to users
The Manage Person API provides a way to update the groups that users belong to. Adding an additional parameter to the JSON payload allows groups to be added, replaced or removed. The group can be added when users are created or when they are updated. The syntax below would add a group to an existing user. The Manage Person API uses the group’s UPN when adding a person to it. If one of the groups is an organizational group then the users organization will be automatically set.

{
	"operation": "CREATE_OR_UPDATE",
	"users": [{
		"properties": {
			"Upn": "MyNewUser@example.com"
		},
		"groups":{"ADD":["Marketing","Accounting"]}
	}]
}
Using the Postman client, adding groups to a user would look like:

manage persons 4.png

Another option available is to replace all groups the user has with a new (or multiple) group:

manage persons 5.png

It’s also possible to remove any group or groups from a user (any groups not included would remain a group of the user):

manage persons 6.png

Assigning roles to users
Similar to adding groups, roles can be added to users in the same manner as using ADD, REPLACE, or REMOVE. The JSON syntax is identical, with the exception of the “roles” attribute name.

{
	"operation": "CREATE_OR_UPDATE",
	"users": [{
		"properties": {
			"Upn": "MyNewUser@example.com"
		},
		"roles":{"ADD":["Self-Service Portal User"]}
	}]
}
The following is an example of using the Manage Persons API to grant the tenant admin user role to a user.

{
"operation": "CREATE_OR_UPDATE",
"users": [{
"properties": {
"Upn": "<The UPN of the user who needs the tenant admin role>"
},
"roles":{"ADD":["tenantAdmin"]}
}]
}
When adding one or more roles, existing roles remain in place:

manage persons 7.png

When replacing roles, any existing roles are removed and the new ones added:

manage persons 8.png

When removing a role, existing ones remain:

manage persons 9.png

Adding licenses to users
The Manage Persons API can also be used to set the license information for a specific user.

{
	"operation": "CREATE_OR_UPDATE",
	"users": [{
		"properties": {
			"Upn": "MyNewUser@example.com"
		},
		"licenses":{
			"ADD":[{
            "type": "Named Users",

          }]
		      }
    	}]
}
manage persons 10.png

Updates to multiple persons
One advantage of the Manage Persons API is that you can run updates on multiple records at the same time. When updating a large number of persons, using a script is often the best method for generating the JSON payload. In the example below, multiple contacts are being added to the system.

{
	"operation": "CREATE_OR_UPDATE",
	"users": [{
		"properties": {
			"IsMaasUser":"false",
			"FirstName": "Steve",
			"Upn": "MyNewUser@example.com",
			"OfficePhoneNumber": "5557788",
			"LastName": "Smith",
			"Location": "London",
			"Email": "MyNewUser@example.com"
		}
	}, {
		"properties": {
			"IsMaasUser":"false",
			"FirstName": "Jason",
			"Upn": "MyNewUser4@example.com",
			"OfficePhoneNumber": "5557781234",
			"LastName": "Smith",
			"Location": "London",
			"Email": "MyNewUser4@example.com"
		}
	}]
}
In Postman (note that the entire Body isn't shown in the image):

manage persons 11.png

Assign data domains to a user
You can replace the existing data domains or add new data domains for a user.

There are two methods to replace the existing data domains with new values. Note that when using either method, you must not use the DataDomains property and the dataDomains attribute at the same time.

Note: you can assign up to 250 data domains to a user.

Method 1: directly specify a new list of values for the DataDomains property

{
    "operation":"CREATE_OR_UPDATE",
    "users":[
        {
            "properties":{
                "FirstName": "Charles",
                "LastName": "Walker",
                "Upn": "u5627927",
                "OfficePhoneNumber": "12345678",
                "Password":"Admin_7895",
                "Email":"charles.walker2@mycompany.com",
                "DataDomains":["HR_c", "IT_c"]
            },
            "roles":{
                "REPLACE":[
                    "Incident Manager"
                ]
            }

        }
    ]
}
Method 2: specify a new list of values by using REPLACE for the dataDomains attribute

{
    "operation":"CREATE_OR_UPDATE",
    "users":[
        {
            "properties":{
                "FirstName": "Charles",
                "LastName": "Walker",
                "Upn": "u5627927",
                "OfficePhoneNumber": "12345678",
                "Password":"Admin_7895",
                "Email":"charles.walker2@mycompany.com"
            },
            "roles":{
                "REPLACE":[
                    "Incident Manager"
                ]
            },
            "dataDomains":{
                "REPLACE":["HR_c","IT_c"]
            }

        }
    ]
}
Additionally, instead of replacing, you can also append new data domains to the existing ones, by using ADD for the dataDomains attribute.

{
    "operation":"CREATE_OR_UPDATE",
    "users":[
        {
            "properties":{
                "FirstName": "Charles",
                "LastName": "Walker",
                "Upn": "u5627927",
                "OfficePhoneNumber": "12345678",
                "Password":"Admin_7895",
                "Email":"charles.walker2@mycompany.com"
            },
            "roles":{
                "REPLACE":[
                    "Incident Manager"
                ]
            },
            "dataDomains":{
                "ADD":["AM_c","FM_c"]
            }

        }
    ]
}

BI Integration API
Updated on Apr 28, 2022
On this page
Initial data sync
Ongoing data sync
Get status
Get all syncs
Output format
Output example
Show more
The Business Intelligence (BI) integration API can be implemented for integrating Service Management with a third party business intelligence system. The record types and fields integrated are defined in the BI Integration user interface. For more information, see Business Intelligence integration.

The API enables you to configure and manage the integration process using the following operations:

Initial data sync. Begins the process by taking a snapshot of all occurrences of the specified record types and their fields and relationships and stores the results in CSV files which are identified by a generated syncId. This API should be run once the first time you perform an integration.
Ongoing data sync. Produces the list of all updates or only the last updates that occurred since a previous sync (up to a maximum of 7 days from the starting time) and stores the results in CSV files identified by a generated syncId. This API should be run regularly to keep the external integration in sync with Service Management updates.
Get status. Returns the status information for each record type specified. Use the fileId returned to generate a File Repository Service (FRS) URL to download the exported CSV files.
Get All Syncs. Returns the results of all recent syncs.
If the integration configuration was changed by adding or removing a record type, field, or relationship, you must run the initial sync again before running the ongoing sync.

Every tenant is given a total integration capacity per calendar month, known as a quota. Currently, the value is 10 GB per tenant. When a BI sync job (initial data or ongoing data) is run and produces output, it's counted toward the BI quota. The quota usage is based on the bytes of output written to disk (in the unzipped form). When your quota is exceeded, all BI jobs will fail with an error indicating the reason. To overcome this issue, you will need to wait for the next calendar month or contact Support if you have a business need to raise the quota limit for your tenant.

The BI sync jobs are queued on the suite instance and the number of jobs in the queue impacts when your jobs are run.

Initial data sync
Enter the following POST request URI:

https://<host>:<port>/rest/<tenantId>/bi/initial/new

There are no parameters for this URI.

Previous URI (https://<host>:<port>/rest/<tenantId>/bi/initial) is still valid without multiple synchronization configurations and ongoing last snapshot query.

The POST request JSON is {"BiSyncConfigurationName":"<configuration name>"}.

The BiSyncConfigurationName is the name of the synchronization configuration. If a new BI configuration has been added, use the custom name. Otherwise, use the default BI configuration profile name: EmptyConfiguration.

The following is an example of the structure of the response JSON:

{
"SyncId": "f9e2c239-6e44-4e1e-aa18-be56f03f6605",
"Status": "SUCCESS"
}
The syncId is the generated unique ID for this sync operation.

Ongoing data sync
Enter the following POST request URI:

https://<host>:<port>/rest/<tenantId>/bi/ongoing/new

Previous URI (https://<host>:<port>/rest/<tenantId>/bi/ongoing) is still valid without multiple synchronization configurations and ongoing last snapshot query.

The POST request JSON is: {"BiSyncConfigurationName":"<configuration name>","LastUpdateTime":"<timestamp>","SyncEndTime":"<timestamp>"}.

An example of a POST request JSON is:

{
     "BiSyncConfigurationName: "EmptyConfiguration"
"LastUpdateTime": "1442446258123",
"SyncEndTime": "1442456781207"
}
where

the BiSyncConfigurationName is the name of the synchronization configuration. If a new BI configuration has been added, use the custom name. Otherwise, use the default BI configuration profile name: EmptyConfiguration.
the LastUpdateTime parameter is the timestamp returned from the Get Status API for a previous initial or ongoing sync operation.
the SyncEndTime parameter indicates the end of the sync period. The SyncEndTime parameter is optional. If you don't enter it, the default value for the sync period is 7 days.
The maximum value for the sync period is 7 days. If you enter a value for the SyncEndTime parameter that's more than 7 days later than the LastUpdateTime parameter, the sync period is cut off at 7 days beyond the LastUpdateTime value.

The following is an example of the structure of the response JSON:

{
"SyncId": "1c6387bd-7d89-44d7-be6f-d6adbf71a77c",
"Status": "SUCCESS"
}
The SyncId is the generated unique ID for this sync operation.

Get status
Enter the following GET request URI:

https://<host>:<port>/rest/<tenantId>/bi/status/<syncID>

where the <syncID> parameter is the generated unique ID returned by an initial or ongoing sync operation.

The following is an example of the structure of the response JSON:

{
"SyncId": "0dd6d4c9-d98d-4731-8d49-6c286f61fe3e",
"Type": "INITIAL",
"LastUpdateTime": "1438884895176",
"TotalProcessingTime": "11.638",
"Status": "COMPLETE",
"RemainingQuota": 1870957325,
"TotalByteCount": 179782,
"Files": [
{
"Status": "COMPLETE",
"TotalByteCount": 39010,
"Segments": [
{
"Name": "Person",
"FileId": "7c006bac-448d-4fc1-b38d-aead728bb35a",
"Status": "COMPLETE",
"TotalByteCount": 39010,
"RecordCount": 500
}
]
},
{
"Status": "COMPLETE",
"TotalByteCount": 21087,
"Segments": [
{
"Name": "Incident",
"FileId": "96100dd5-abd1-4044-9b36-0fb1575651e8",
"Status": "COMPLETE",
"TotalByteCount": 21087,
"RecordCount": 300
}
]
},
{
"Status": "COMPLETE",
"TotalByteCount": 3953,
"Segments": [
{
"Name": "ActualService",
"FileId": "301c94af-f8f8-42d2-aca9-d2975ee5d01a",
"Status": "COMPLETE",
"TotalByteCount": 3953,
"RecordCount": 100
}
]
},
{
"Status": "COMPLETE",
"TotalByteCount": 1877,
"Segments": [
{
"Name": "IncidentCausedByRequest",
"FileId": "986ce4cb-5fe4-4069-9ece-5162bde0a80c",
"Status": "COMPLETE",
"TotalByteCount": 1877,
"RecordCount": 50
}
]
},
{
"Status": "COMPLETE",
"TotalByteCount": 45941,
"Segments": [
{
"Name": "ServiceLevelTarget",
"FileId": "cacf92a3-57c1-4d03-af51-bc8178380e71",
"Status": "COMPLETE",
"TotalByteCount": 45941,
"RecordCount": 500
}
]
},
{
"Status": "COMPLETE",
"TotalByteCount": 64438,
"Segments": [
{
"Name": "Request",
"FileId": "9aace1a5-40bc-42f3-ae74-c35c2ccb94d7",
"Status": "COMPLETE",
"TotalByteCount": 64438,
"RecordCount": 300
}
]
},
{
"Status": "COMPLETE",
"TotalByteCount": 3476,
"Segments": [
{
"Name": "PersonGroup",
"FileId": "d17e6528-7c6d-4419-b0fb-46cf1a849726",
"Status": "COMPLETE",
"TotalByteCount": 3476,
"RecordCount": 50
}
]
}
]
}
The fields in the JSON are as follows:

SyncId. Same as input parameter
Status. One of the following:
PENDING. The job is queued for processing. Wait for PENDING jobs to progress to PROCESSING instead of re-submitting the jobs multiple times, which will inadvertently degrade the system performance.
PROCESSING. The job is being processed.
COMPLETE. The job is finished.
FAILED_TO_PROCESS. The job has failed.
ErrorMessage. Message displayed if an error occurred during the job (only when status is FAILED_TO_PROCESS)
LastUpdateTime. Timestamp to use in the next ongoing sync operation (only when status is COMPLETE)
RecordCount. The number of records already processed
TotalByteCount. Size of all generated files (in bytes)
TotalProcessingTime. Job processing time (in seconds)
RemainingQuota. Remaining space in the quota (in bytes)
Files. The list of generated files in FRS with the fileId, name and size (only when status is COMPLETE)
To access the output files, construct a URL as follows: <host>:<port>/rest/<tenantId>/frs/file-list/<fileId> where <fileId> is the FileId for each of the generated files. Paste the URL into a browser to run the FRS REST call and automatically download the file to your downloads directory.

The FRS files are deleted from the system after 7 days. Make sure to download the files before they are deleted.

Get all syncs
Enter the following GET request URI:

https://<host>:<port>/rest/<tenantId>/bi/status

There are no parameters for this URI.

The following is an example of the structure of the response JSON:

[
{
"SyncId": "838e1923-ed5f-4ddc-b14c-545b5a7646b7",
"Type": "INITIAL",
"Status": "COMPLETE",
"LastUpdateTime": "1442543211350",
"TotalProcessingTime": "8.042",
"RemainingQuota": 1870957,
"TotalByteCount": 34464,
"Files": [
{
"Status": "COMPLETE",
"TotalByteCount": 16385,
"Segments": [
{
"Name": "Incident_0",
"FileId": "cd98f886-5f8e-4881-8aac-c4ab70883c11",
"RecordCount": 68,
"Status": "COMPLETE",
"TotalByteCount": 16385
}
]
}
]
},
{
"SyncId": "ce7daa77-2b77-4229-8a9a-ad275481d188",
"Type": "ON_GOING",
"Status": "COMPLETE",
"LastUpdateTime": "1442612404950",
"TotalProcessingTime": "2.552",
"RemainingQuota": 1731239,
"TotalByteCount": 3210,
"Files": [
{
"Status": "COMPLETE",
"TotalByteCount": 479,
"Segments": [
{
"Name": "Incident_0",
"FileId": "5465cbd7-765e-48b9-b672-e4ac3b44c3c2",
"RecordCount": 10,
"Status": "COMPLETE",
"TotalByteCount": 479
}
]
}
]
}
]
The fields are the same as those in the Get status API.

To access the output files, construct a URL as follows: <host>:<port>/rest/<tenantId>/bi/file-list/<fileId> where <fileId> is the FileId for each file from the relevant sync.

The FRS files are deleted from the system after 7 days. Make sure to download the files before they are deleted.

Output format
The sync output is stored as multiple zipped CSV files in the FRS in one of the following formats:

One file per record type. The maximum size of each file is 2 MB unzipped. If the file exceeds this size, it's split into multiple chunks.

The first row in each file is a header as follows:

BiSyncOperation, <field1>, <field2>…<field-n>

where <field-1>…<field-n> are the record type field names specified in the sync configuration. Note that one to one and one to many relationships are treated as regular fields.

Subsequent rows specify values for some of the columns depending on the operation. The operation can be one of the following:

ADD_ENTITY. Creation of a new record, with initial values for every specified field
REMOVE_ENTITY. Deletion of a record, no field value is provided
UPDATE_ENTITY. Only the field values that have changed are specified
The output format for both the initial and ongoing sync is the same. The only difference is that initial sync files contain only ADD_ENTITY records, while ongoing sync files can contain ADD_ENTITY, UPDATE_ENTITY, and REMOVE_ENTITY records.

The first column of the file is called RowId. The unique RowId is used to reference the specific row of the main file from the complex type file (comments or user options).

For each selected complex field for a record type, the following additional columns are also included in the output file:

<complex-field-name>_File. The name of the CSV file containing the complex field value for the operation in that row.
<complex-field-name>_Rows. The row IDs of the relevant rows in the complex field file.
For a sample output file, see the Output example section.

The ongoing data sync output displays a blank space for an unchanged field and displays <NULL> for a field whose value has been deleted.

One file per many to many relationship type. The maximum size of each file is 2 MB unzipped. If the file exceeds this size, it's split into multiple chunks.

The first row in each file is a header as follows:

BiSyncOperation, LastUpdateTime, <first-record-type>, <second-record-type>

Subsequent rows specify values for some of the columns depending on the operation. The operation can be one of the following:

ADD_RELATION. Addition of a many to many relationship between two records.
REMOVE_RELATION. Deletion of a many to many relationship between two records.
The output format for both the initial and ongoing sync is the same. The only difference is that initial sync files contain only ADD_RELATION records, while ongoing sync files can contain ADD_RELATION and REMOVE_RELATION records.

Complex type fields. If you selected a complex type field in the sync configuration, the data is exported in a separate file. For static complex type fields, such as comments, there is one file for each record type. For dynamic complex type fields, such as user options, there are separate files for each user option for each record type.

The following columns are included in the output file:

RowId. The row number (a unique value). This is the row ID referenced from <complex-field-name>_Rows in the main record type file.
ParentFile. Reference to the original record type file name.
ParentRowId. Reference to the row ID of the original record type transaction in the main record type file.
Index. The index of the complex field row within each complex field entry. The first row of each entry has an index of 1.

Only static complex fields can have multiple rows per field entry. Dynamic complex fields have only one row per entry with an index of 1.

For sample output files, see the Output example section.

Output example
The following example demonstrates output data including a record type file and complex type field files.

For the request record type, the Request output file is the main record type file:


View Fullscreen
RowId	BiSyncOperation	Id	DisplayLabel	UserOptions_File	UserOptions_Rows	Comments_File	Comments_Rows
40224f07-6303-49da-b133-1519bf7099be	ADD_ENTITY	12265	Printer Issue	Request_PrinterUserOptionType_c	["8a4f260c-4e98-40ea-86bb-2de2e7adf60a"]	Request_Comment	["6265f94c-0a05-45af-87aa-5b5c5f099fa4","96fe0174-451a-4ea4-85d1-14d7a0f030b3"]
1420574c-00b6-4517-83fc-c9776e0854d2	ADD_ENTITY	12266	Sending e-mail isn't possible		Request_Comment	["ee85db88-0f81-410b-9d3f-1b4fe44d7470","525daaf1-f13f-47f9-baa0-f38c211aabac"]
ae0f872e-89d1-41b4-b54e-33bc156b7ac7	ADD_ENTITY	12269	Printer draw fault	Request_PrinterUserOptionType_c	["05a012a4-44b3-4837-b714-ae9441cedbc6"]	Request_Comment	["f6d22a71-6e05-45f5-8123-fd061e46a215","4bb867f0-0130-4bbb-8c52-45e99f0a5e70"]
d4a37612-7c8b-4c33-8cce-d770dddfa780	ADD_ENTITY	12270	server down
The Request_Comments file is the complex type field file for comments:


View Fullscreen
RowId	ParentFile	ParentRowId	Index	CommentId	CommentBody	Submitter
6265f94c-0a05-45af-87aa-5b5c5f099fa4	Request	40224f07-6303-49da-b133-1519bf7099be	1	d91030e2-0b25-4b59-80b0-8c75e2db8abf	Request has been assigned
10014

96fe0174-451a-4ea4-85d1-14d7a0f030b3	Request	40224f07-6303-49da-b133-1519bf7099be	2	4854373e-6ac0-4b05-840e-1d4417bcbbfe	<strong>Solution:</strong> A great solution	10014
ee85db88-0f81-410b-9d3f-1b4fe44d7470	Request	1420574c-00b6-4517-83fc-c9776e0854d2	1	f08fbe2b-e20c-43cc-9405-e22036b78080	Request has been assigned	10014
525daaf1-f13f-47f9-baa0-f38c211aabac	Request	1420574c-00b6-4517-83fc-c9776e0854d2	2	855a0081-1c84-4c58-a0bc-8a493403fa03	<strong>Solution:</strong> You need a valid activekey	10014
f6d22a71-6e05-45f5-8123-fd061e46a215	Request	ae0f872e-89d1-41b4-b54e-33bc156b7ac7	1	a2e1f2e4-b9a0-41cb-817c-e3299d2f671f	Request has been assigned	10014
4bb867f0-0130-4bbb-8c52-45e99f0a5e70	Request	ae0f872e-89d1-41b4-b54e-33bc156b7ac7	2	2b1c9f36-0ae8-4066-98c9-9b759fa85492	<strong>Solution:</strong> Open a ticket for maintenance 	10014
Note that the ParentRowId for the first two rows is the same, which indicates that both of these comments relate to the first row of the main record type file. The first row has an index of 1, meaning it's the first comment relating to the row of the main file. The second row has an index of 2, meaning it's the second comment relating to that row. This information can also be found in the main file, where the Comments_Rows column in the first row contains the row IDs of these two comments rows.

A similar pattern occurs for the third and fourth rows; they relate to the second row of the main file. The Comments_Rows column in that row contains the row IDs of the third and fourth comments rows.

There are two complex type field files for user options, one for each user option exported:

Request_PrinterUserOptionType_c


View Fullscreen
RowId	ParentFile	ParentRowId	Index
8a4f260c-4e98-40ea-86bb-2de2e7adf60a	Request	40224f07-6303-49da-b133-1519bf7099be	1
05a012a4-44b3-4837-b714-ae9441cedbc6	Request	ae0f872e-89d1-41b4-b54e-33bc156b7ac7	1
Request_SelectPCUserOptionsType_c


View Fullscreen
RowId	ParentFile	ParentRowId	Index
503d2e38-6152-4c46-9bc7-79187938d9e5	Request	417a0724-e425-4ad8-a4c7-52650a04450a	1
b997afe4-0ec7-43bb-8183-7639128ec929	Request	a85f149d-dc06-41f9-94de-a0c121c03bd0	1
In the first row of the first user options file, the ParentRowId column contains the row ID of the first row of the main file. In the first row of the main file, Request_PrinterUserOptionType_c is specified as the UserOptions_File and the UserOptions _Rows column contains the row ID of the first row in this user options file.

Native SACM limitation
After NSACM is enabled, CI relationships are no longer saved in associations. Instead, they are synchronized from UCMDB. Therefore, all local CI relationships saved as associations (e.g., SystemElementContainsDevice of Device) before Native SACM was enabled will become invalid even though the data still exists. As a result, CI relationships and all other federated attribute values such as Serial Number cannot be extracted through BI sync APIs.

Case Exchange REST API
Updated on Oct 9, 2022
On this page
Get multiple records
Get single record
Get attachments
Create record
Update record
Add attachments
Show more
Service Management provides a Case exchange REST API to exchange data between Service Management and an external system. The REST API enables you to create and update records in Service Management. It also enables you to relate those records to records in the external system. You can use this API in the preconfigured Case exchange framework with Service Manager for exchanging incident and request records. For information on the Service Manager integration, see External systems - Service Manager integration.
The following REST calls are available:

Get multiple records. Retrieves multiple records.
Get single record. Retrieves a specific record.
Get attachments. Retrieves the attachments to files.
Create record. Creates new records.
Update record. Updates existing records.
Add attachments. Adds attachments to files.
Get multiple records
Enter the following GET request URI:

https://<serverAddress>/rest/<tenant-id>/ces?layout=<list-of-record-properties>&type=<record-type>&system=<external-system-name>&time=<last=update-time>&skip=<offset>&size=<page-size>

The parameters are as follows:

Layout. The list of record properties to retrieve.
Type. The record type.
System. The name of the external system as defined in the External systems under Integration Management.
Time. Records with an operation time greater than this value are retrieved. A record's operation time is the time when the record's specific properties are updated and the update of those specific properties must trigger one of the operations described on these pages:

Case Exchange integration operations for incidents

Case Exchange integration operations for requests

Case Exchange integration operations for changes

The value of the time is the UTC milliseconds from the epoch.

Skip. The offset (where the page starts). Used for pagination. The default is 0.
Size. The maximum number of records that you can retrieve (starting from offset). Used for pagination. The default is 4000.
For example, enter the following REST call to retrieve multiple incidents:

GET http://.../rest/100000001/ces?layout=Id,DisplayLabel,ImpactScope,Urgency,
RegisteredForActualService.DisplayLabel,IncidentAttachments&type=Incident&system=SM
&time=0&skip=0&size=100
The following is the response JSON:

    {
"entities": [
{
"entity_type": "Incident",
"properties": {
"Id": "11385",
"DisplayLabel": "Incident for Central IT",
"ImpactScope": "SingleUser",
"Urgency": "SevereDisruption",
"IncidentAttachments": "{\"complexTypeProperties\":[{\"properties\":
                      {\"id\":\"e940074a-50da-45e7-aaf6-04738946d86e\",\"file_name\":\"CDP
                      Quick Start Guide for Individuals.docx\",\"file_extension\":\"docx\",
                      \"size\":1246120,\"mime_type\":\"application/vnd.openxmlformats-
                      officedocument.wordprocessingml.document\",\"Creator\":\"devUser1\",
                      \"LastUpdateTime\":1397011728993}},{\"properties\":{\"id\":\
                      "22291a78-c529-470f-965a-8f5a6f6414bf\",\"file_name\":\
                      "Analytic_Reqs.xlsx\",\"file_extension\":\"xlsx\",\"size\":14830,
                      \"mime_type\":\"application/vnd.openxmlformats-officedocument.
                      spreadsheetml.sheet\",\"Creator\":\"devUser1\",\"LastUpdateTime\":
                      1397064286794}}]}"
},
"related_properties": {
"RegisteredForActualService": {
"DisplayLabel": "PC Support"
},
"ext_properties": {
"Operation": "Update",
"ExternalId": "External Test Incident 1",
"ExternalEntityType": "Incident",
"OperationTime": 1395428400000,
},
"Comments": [
{
"Name": Dave Davies,
"Body": Need to assign to IT
"CreatedTime": 1366201234968
}
],
}
],
"meta": {
"completion_status": "OK",
"total_count": 3
}
}
Get single record
Enter the following GET request URI:

https://<serverAddress>/rest/<tenant-id>/ces/<record-id>?layout=<list-of-record-properties>&type=<record-type>&system=<external-system-name>

The parameters are as follows:

Record Id. The Id of the specific record to retrieve.
Layout. The list of record properties to retrieve.
Type. The record type.
System. The name of the external system as defined in the External systems under Integration Management.
For example, enter the following REST call to retrieve a single incident:

GET http://.../rest/100000001/ces/16116?layout=Id,Description,ImpactScope,IncidentAttachments,
RegisteredForActualService.DisplayLabel &type=Incident&system=SM

The following is the response JSON:

{
"entities": [
{
"entity_type": "Incident",
"properties": {
"ImpactScope": "SingleUser",
"Description": "<p>Case exchange test incident</p>\n",
"IncidentAttachments": "{\"complexTypeProperties\":[]}",
"Id": "16116"
},
"related_properties": {
"RegisteredForActualService": {
"DisplayLabel": "Backup - Data Center"
}
},
"ext_properties": {
"Operation": "Assign",
"OperationTime": 1404950069913
},
"Comments": []
}
],
"meta": {
"completion_status": "OK",
"total_count": 1
}
}
Get attachments
Enter the following GET request URI:

https://<serverAddress>/rest/<tenant-id>/ces/attachment/<attachment-id>

where the <attachment-id> parameter is taken from the response JSON in the Get single record or Get multiple records call. Make sure to include this property in the layout parameter of the Get call. In the above example for incidents, the property is: IncidentAttachments.

For example, enter the following REST call:

GET http://.../rest/100000001/ces/attachment/e940074a-50da-45e7-aaf6-04738946d86e
Create record
Enter the following POST request URI:

https://<serverAddress>/rest/<tenant-id>/ces

There are no parameters for this URI.

To create a new record, the Operation field must be set to Create. Additionally, when creating a record, the API assigns an Actual service value based on the following fields, which are listed from the highest to lowest priority:
The RegisteredForActualService.Id field in the JSON body of the REST call
The Default actual service field in the external system configuration
The RegisteredForActualService field in the JSON body of the REST call
For example, enter the REST call with the following JSON body to create incident records:

    {
"entities": [
{
"entity_type": "Incident",
"template": "SAW Template name to apply on create (optional)",
"properties": {
"DisplayLabel": "This incident opened from external system.",
"Description":  "Description of incident",
"ImpactScope": "MultipleUsers",
"Urgency": "SevereDisruption",
"RegisteredForActualService":  "20132",
"Category.DisplayLabel": "Cloud",
"DeviceAffectedByIncident.DisplayLabel": ["SERV23SD090", "SERV23SD090"],
"IncidentCausedByIncident<": ["20500", "20505"],
"IncidentCausedByIncident>": ["20510", "20515"],
"IncidentAttachments": "{\"complexTypeProperties\":[{\"properties\":
                      {\"id\":\"161ecd4d-0fa4-4a48-a9c8-12371561545e\",\"file_name\":
                      \"attach1.txt\",\"file_extension\":\"txt\",\"size\":26,\"mime_type\":
                      \"text/plain\",\"Creator\":\"devUser1\",\"LastUpdateTime\":
                      1398389475854}}]}"
},
"Comments": [
{
"Name": "John Smith"
"Body": "Assigned to Central IT.",
"CreatedTime": "April 24, 2014 5:00 PM PST"
}
],
"ext_properties": {
"ExternalSystem": "SM",
"Operation": "Create",
"ExternalId": "IM20123",
"ExternalEntityType": "Incident",
"ExternalStatus": "Pending Vendor",
"URL": <optional URL to external system>,
}
}
]
}
The following is the response JSON:

    {
"entities": [
{
"entity": {
"entity_type": "Incident",
"properties": {
"Id": "10034"
}
},
"completion_status": "OK",
"operation": "Create",
"warningDetails": […],
"errorDetails": {…}
}
],
"meta": {
"completion_status": "OK",
"errorDetails": {…}
}
}
The possible completion status values are:

OK
FAILED
Comments

You can add comments to a Create call by including a Comments section in the request JSON. The Name and CreatedTime parameters under each comment must be provided as strings in any format. These strings aren't interpreted by Service Management but they are added to the body of the comment for identification purposes.

Comments are always added as new comment records. Older comments can't be updated via this POST API. Comments submitted in a POST by a user aren't presented back to the same user as part of a GET response.

Relationships

When setting relationships in a Create call, the following options are supported:


View Fullscreen
One to one, One to many relationships	Many to many asymmetric relationships	Many to many relationships to records of the same type
Related record ID
Set relationship to a related record specified by ID.

Syntax: RelationName:Id

Example: RegisteredForActualService: 20132

Set relationship to a list of related records specified by IDs.

Syntax: RelationName: [Id-1, Id-2, …, Id-n]

Example: DeviceAffectedByIncident: [11534, 11535]

Set relationship to a list of related records specified by Ids. The relationship side of RelationName corresponding to the related records must be specified (< = left side, > = right side).

Syntax: RelationName(<|>): [Id-1, Id-2, …, Id-n]

Example: IncidentCausedByIncident<: [12324, 12327]

Related record property value
Set relationship to a related record specified by a value of a property on the related record.

Syntax: RelationName.Property:Value

Example: RegisteredForActualService.DisplayLabel: Catalog

Set relationship to a list of related records specified by the values of a property on the related records.

Syntax: RelationName.Property: [Value-1, Value-2, …, Value-n]

Example: DeviceAffectedByIncident.DisplayLabel: [SERV02SD059, SERV02SD063]

Set relationship to a list of related records specified by the values of a property on the related records. The relationship side of RelationName corresponding to the related entities must be specified (< = left side, > = right side).

Syntax: RelationName(<|>).Property": [Value-1, Value-2, …, Value-n]

Example: IncidentCausedByIncident<.Category: [12345, 12346]

Related record related property value
Set relationship to a related record specified by the value of a related property on the related record. (RelatedEntityRelationName must be a one to one or one to many relationship of the related record.)

Syntax: RelationName.RelatedEntityRelationName.Property :Value

Example: RegisteredForActualService.SupportLevel1Group.Name: CAB Group

Set relationship to a list of related records specified by the values of a related property of the related records. (RelatedEntityRelationName must be a one to one or one to many relationship of the related record.)

Syntax: RelationName.RelatedEntityRelationName.Property: [Value-1, Value-2, …, Value-n]

Example: DeviceAffectedByIncident.SupportLevel1Group.Name: [CAB Group]

Set relationship to a list of related records specified by the values of a related property on the related records. (RelatedEntityRelationName must be a one to one or one to many relationship of the related record.) The relationship side of RelationName corresponding to the related entities must be specified (< = left side, > = right side).

Syntax: RelationName(<|>).RelatedEntityRelationName.Property: [Value-1, Value-2, …, Value-n]

Example: IncidentCausedByIncident<.Category.DisplayLabel: [Category-1, Category-2]

Update record
Enter the following POST request URI:

https://<serverAddress>/rest/<tenant-id>/ces

There are no parameters for this URI.

To update a record, the Operation field must be set to any valid operation value except Create.

For example, enter the REST call with the following JSON body to update incident records:

 {
    "entities": [{
        "entity_type": "Incident",
        "properties": {
            "Id": "10034",
            "DisplayLabel": "This incident is updated from external system.",
            "Description": "Update of the Description of incident",
            "ImpactScope": "SingleUser",
            "Urgency": "NoDisruption",
            "RegisteredForActualService": "20135",
            "Category.DisplayLabel": "Cloud",
            "DeviceAffectedByIncident.DisplayLabel": {
                "add": [
                    "SERV18SD018",
                    "SERV18SD019"
                ],
                "delete": [
                    "SERV23SD090"
                ]
            },
            "IncidentCausedByIncident<": {
                "add": [
                    "20600",
                    "20605"
                ]
            },
            "IncidentCausedByIncident>": {
                "delete": [
                    "20510"
                ]
            },
            "IncidentAttachments": "{\"complexTypeProperties\":[{\"properties\":{\"id\":\"161ecd4d-0fa4-4a48-a9c8-12371561545e\",\"file_name\":\"attach1.txt\",\"file_extension\":\"txt\",\"size\":26,\"mime_type\":\"text/plain\",\"Creator\":\"devUser1\",\"LastUpdateTime\":1398389475854}},{\"properties\":{\"id\":\"90166d96-031f-46b8-9a6f-02067092a552\",\"file_name\":\"attach2.txt\",\"file_extension\":\"txt\",\"size\":32,\"mime_type\":\"text/plain\",\"Creator\":\"devUser1\",\"LastUpdateTime\":1398389674101}}]}"
        },
        "Comments": [{
            "Name": "John Smith",
            "Body": "Any updates?",
            "CreatedTime": "April 24, 2014 5:30 PM PST"
        }],
        "ext_properties": {
            "ExternalSystem": "SM",
            "Operation": "Update",
            "ExternalId": "IM20123",
            "ExternalEntityType": "Incident",
            "ExternalStatus": "Pending Vendor",
            "URL": "<optional URL to external system>"
        }
    }]
}
The following is the response JSON:

    {
"entities": [
{
"entity": {
"entity_type": "Incident",
"properties": {
"Id": "10034",
}
},
"completion_status": “OK”,
"operation": "UPDATE",
"warningDetails": […],
"errorDetails": {…}
}
],
"meta”: {
"completion_status": "OK",
"errorDetails": {…}
}
}
Comments

You can add comments to an Update call by including a Comments section in the request JSON. The Name and CreatedTime parameters under each comment must be provided as strings in any format. These strings aren't interpreted by Service Management but they are added to the body of the comment for identification purposes.

Comments are always added as new comment records. Older comments can't be updated via this POST API. Comments submitted in a POST by a user aren't presented back to the same user as part of a GET response.

Relationships

When setting relationships in an Update call, the following options are supported:


View Fullscreen
One to one, One to many relationships	Many to many asymmetric relationships	Many to many relationships to records of the same type
Related record ID
Update relationship to related record specified by ID or to null.

Syntax: RelationName:Id | null

Example: RegisteredForActualService: 2013,Category: null

Update the existing set of related records by adding and/or deleting a list of related records specified by IDs. You can specify Add only, Delete only, or both.

Syntax: RelationName: {add: [Id-add-1, Id-add-2, …, Id-add-n], delete: [Id-del-1, Id-del-2, …, Id-del-m]}

Example: DeviceAffectedByIncident: {add: [11534, 11535, 11536], delete: [11537, 11538]}

Update the existing set of related records by adding and/or deleting a list of related records specified by IDs. You can specify Add only, Delete only, or both. The relationship side of RelationName corresponding to the related records must be specified (< = left side, > = right side).

Syntax: RelationName: {add: [Id-add-1, Id-add-2, …, Id-add-n], delete: [Id-del-1, Id-del-2, …, Id-del-m]}

Example: IncidentCausedByIncident<: {add : [12324, 12327], delete: [12328]}

Related record property value
Update relationship to a related record specified by a value of a property on the related record.

Syntax: RelationName.Property:Value

Example: RegisteredForActualService.DisplayLabel: Catalog

Update the existing set of related records by adding and/or deleting a list of related records specified by the values of a property on the related records. You can specify Add only, Delete only, or both.

Syntax: RelationName.Property: {add: [Value-add-1, Value-add-2, …, Value-add-n], delete: [Value-del-1, Value-del-2, …, Value-del-m]}

Example: DeviceAffectedByIncident.DisplayLabel: {add: [SERV02SD059, SERV02SD063, SERV02SD064], delete: [SERV02SD065, SERV02SD066]}

Update the existing set of related records by adding and/or deleting a list of related records specified by the values of a property on the related records. You can specify Add only, Delete only, or both. The relationship side of RelationName corresponding to the related entities must be specified (< = left side, > = right side).

Syntax: RelationName.Property: {add: [Value-add-1, Value-add-2, …, Value-add-n], delete: [Value-del-1, Value-del-2, …, Value-del-m]}

Example: IncidentCausedByIncident<.Category: [12345, 12346]

Related record related property value
Update relationship to a related record specified by the value of a related property on the related record. (RelatedEntityRelationName must be a one to one or one to many relationship of the related record.)

Syntax: RelationName.RelatedEntityRelationName.Property :Value

Example: RegisteredForActualService.SupportLevel1Group.Name: CAB Group

Update the existing set of related records by adding and/or deleting a list of related records specified by the values of a related property on the related records. (RelatedEntityRelationName must be a one to one or one to many relationship of the related record.)

Syntax: RelationName.RelatedEntityRelationName.Property: {add: [Value-add-1, Value-add-2, …, Value-add-n], delete: [Value-del-1, Value-del-2, …, Value-del-m]}

Example: DeviceAffectedByIncident.SupportLevel1Group.Name: {add:[CAB Group, ECAB Group], delete: [Change Manager Group]}

Update the existing set of related records by adding and/or deleting a list of related records specified by the values of a related property on the related records. (RelatedEntityRelationName must be a one to one or one to many relationship of the related record.) The relationship side of RelationName corresponding to the related entities must be specified (< = left side, > = right side).

Syntax: RelationName.RelatedEntityRelationName.Property: {add: [Value-add-1, Value-add-2, …, Value-add-n], delete: [Value-del-1, Value-del-2, …, Value-del-m]}

Example: IncidentCausedByIncident<.Category.DisplayLabel: {add: [Category-1, Category-2], delete: [Category-3]}

Add attachments
 For detailed steps to add attachments, see Attachments.
To add attachments via the Case exchange REST service, you need to first upload the attachments via the attachment API. Enter the following POST request URI:

https://<serverAddress>/rest/<tenant-id>/ces/attachment/

The "Headers" section must contain two specific headers:

Content-Type: Set it to "multipart/form-data;boundary=YYYY". The boundary in this example is set to “YYYY”, but any unique boundary may be used. Any change to this boundary must be reflected in the body of the request.
User-Agent: Set it to "Apache-HttpClient/4.4.1". This allows Postman to pass the authorization to SMAX based on a logged-in UI session.
To authenticate, include an appropriate "Cookie" header containing the authentication token as described in Connect to the REST API.

The JSON body is as follows:

--YYYY
Content-Disposition: form-data; name="files[]"; filename="<file-name>"
Content-Type: <media-type>
<Attachment body (text or binary)>

--YYYY--
The following is an example of a response JSON:

{
        "eTag":"570b45f50d2cc11fc8de465bb6a1ac96",
"contentLanguage":"",
"lastModified":1439876814727,
"contentMD5":"570b45f50d2cc11fc8de465bb6a1ac96",
"contentType":"text/plain",
"creator":"devUser1",
"guid":"44067c4a-5c0a-4ca8-b2a8-b726af03d458",
"name":"notes.txt",
"serverTime":1439876814856,"contentEncoding":"",
"expiredTimestamp":1439963214773,
"success":true,
"contentLength":819,"metadata":[]
}
Then, POST an update to the relevant property for the record type.

For example, for incidents, run a POST call to update the IncidentAttachments property, with the attachment IDs returned by the attachment API for the newly added attachments.

You must always provide the full list of current attachments in the IncidentAttachments property, not only the ones that have just been added.

To delete one or more attachments, POST an update to the IncidentAttachments property with the attachment to be deleted.

Security
Configuration

Each External system record must be configured with an Authorized User property. Only users with a tenant administrator role have permission to create or update External system records, which includes setting the Authorized User.

To provide appropriate security, the following best practices are strongly recommended:

Special Integration users should be created for external integrations. Do not use regular Service Management users.
A different integration user should be used for each external integration.
Integration users should be granted the minimum set of permissions necessary.
Authentication

As with other Service Management REST APIs, access to the Case exchange API requires authentication. Integration users must authenticate via the Authentication endpoint service:

/auth/authentication-endpoint/authenticate/token

For more information, see Authentication endpoint service.

Authorization

Once authenticated, the Case exchange API is restricted to the set of the Authorized Users for the External System records configured in Service Management. REST API calls from a non-authorized user are rejected.

Furthermore, separation between external integrations is also provided as follows:

For GET calls, the authenticated user must match the Authorized User corresponding to the system URL parameter of the GET message. Therefore, each integration user is restricted to their own records only and can't retrieve the records of a different integration.
For POST calls, the authenticated user must match the Authorized User defined in the ExternalSystem property under ext_properties. Therefore, each integration user can only create or update records in their own integration.
By configuring integration users with the minimum permissions necessary, you also ensure that their access is limited to the Case exchange API. In particular, these users aren't permitted to directly access the EMS API, and they must do it by using the Case exchange API.

Encryption domain API
Updated on Nov 24, 2021
On this page
Revoke user from all encryption domains
Revoke user from a specific encryption domain
List encryption domains
The following APIs are available for use in connection with encryption domains:
Revoke user from all encryption domains
Enter the following DELETE request URI:

https://<serverAddress>/rest/<tenant-id>/encryption/key_chain/<user-id>

There are no parameters for this URI.

The user's credentials are revoked for all encryption domains.

Revoke user from a specific encryption domain
Enter the following DELETE request URI:

https://<serverAddress>/rest/<tenant-id>/encryption/key_chain/<user-id>/domains/<domain-id>

where the domain-id is the ID of the required encryption domain. You can get the domain ID using the List encryption domains API.

There are no parameters for this URI.

The user's credentials are revoked for the specified encryption domain.

List encryption domains
Enter the following GET request URI:

https://<serverAddress>/rest/<tenant-id>/encryption/domains

There are no parameters for this URI.

The API returns all the encryption domains defined on the tenant.

The following is an example of the structure of the returned data in JSON format:

{
"id": "56826bbb637d6a6db8bee805",
"Name": "d1",
"DomainId": "2",
"DisplayLabelKey": "encryption_messages_a53be345-4aa5-45f1-b3b7-d1c5811c90e2",
"CreatedTime": 1451387835788,
"Owner": "10015",
"AllowedGroups": [{
"GroupId": "10005",
"GroupProperties": {
"LastUpdateTime": 1451220162383,
"Id": "10005"
}
}],
"NotificationOwner": "Both",
"IsEnabled": true
}
The value in the DomainId property is the required value in the Revoke a user from a specific encryption domain API.

Tenant admin permission is required to run the encryption domain APIs.

REST API use-case scenario - import REST API
Updated on Nov 24, 2021
On this page
CSV format request body
XML format request body
Access the import service
The import service supports importing record data into the EMS in either CSV or XML format. Imported data must comply with system and workflow rules for the import process to be successful.

CSV format request body
To import data in CSV format, make sure the CSV file follows these guidelines:

The first line of the file contains the record property names (headers) as specified in the metadata. The names must be identical to the record field names.
The following lines contain the data itself.
The following example can be used to create users:

FirstName,LastName,Email,Name,IsMaasUser,Upn

John,Smith,john.smith@microfocus.com,John Smith,false,john.smith@microfocus.com

John,Doe,john.doe@microfocus.com,John Doe,true,john.doe@microfocus.com

Click here to view a spreadsheet with sample CSV files for a series of records. The files should be imported sequentially according to their number.

The import service creates a separate record for each row of data in the CSV file.

XML format request body
To import data in XML format, make sure the XML file follows these guidelines:

Each property element contains a key element, which holds the record property name as specified in the metadata, and a value element, which holds the property value.
Example:

<entities xmlns="http://www.hpe.com/maas/1.0.0/import">
<entity>
<property>
<key>name</key>
<value>my name 1</value>
</property>
<property>
<key>severity</key>
<value>my severity 1</value>
</property>
</entity>
<entity>
<property>
<key>name</key>
<value>my name 2</value>
</property>
<property>
<key>severity</key>
<value>my severity 2</value>
</property>
</entity>
</entities>
The import service creates a separate record for each entity element in the XML file.

Access the import service
You can access the service using one of the following URLs:

For CSV format: https://<serverAddress>/rest/<tenant-id>/import?entity-type=<entityType>&file-type=CSV
For XML format: https://<serverAddress>/rest/<tenant-id>/import?entity-type=<entityType>&file-type=XML
where entityType represents the type of record you are importing.

To import the data, use the HTTP method: POST. Set the header to be Content-Type with the value application/octet-stream.

The import service returns a job ID.  For example:

{
"job_id": "-8928328985003780356"
}
You can check the status of the import job, by using the following URL:

https://<serverAddress>/rest/<tenant-id>/import/<job_id>

Where <job_id> is the job ID returned after you run the import.

User lock API
Updated on Nov 24, 2021
On this page
Get lock status
Lock user
Unlock user
The following APIs enable you to get the lock status of a user, and lock or unlock a user. Only suite admin users or the internal integration user (bo-integration@dummy.com) can use this API.

Get lock status
Enter the following GET request URI:

https://<serverAddress>/bo/rest/entities/user/<user-id>/lock

where the user-id is the value of the user ID displayed in Suite Administration.

The true or false response indicates the lock status of the user:

true: The user is locked.
false: The user isn't locked.
Lock user
To avoid locking a user that is already locked, you can use GET method to get the lock status of a user.

Enter the following POST request URI to lock a user:

https://<serverAddress>/bo/rest/entities/user/<user-id>/lock

where the user-id is the value of the user ID displayed in Suite Administration.

The true or false response indicates the lock status of the user:

true: The user is locked.
false: The user isn't locked.
Note: This API locks the user only within the suite. It doesn't update the user’s status in the LDAP, SAML, or OAuth server.

Unlock user
Enter the following DELETE request URI to unlock a user:

https://<serverAddress>/bo/rest/entities/user/<user-id>/lock

where the user-id is the value of the user ID displayed in Suite Administration.

The true or false response indicates the lock status of the user:

true: The user is locked.
false: The user isn't locked.
Note: This API unlocks the user only within the suite. It doesn't update the user’s status in the LDAP, SAML, or OAuth server.

DND APIs to get or update application properties
Updated on Apr 6, 2022
On this page
Generate authorization token
Get all application properties
Get one or more application properties by name
Get a single application property by id
Update a single application property by id
Update a list of application properties
DND APIs enable you to:

Get the value of the tenant level application properties
Update the value of the tenant level application properties
The APIs are only applicable to tenant-level application properties
Before running the REST APIs, you must run the Authentication API to obtain X-Auth token for authenticating the user.
Generate authorization token
Run the authentication API with the following details.


View Fullscreen
Type	POST
URL Syntax	https://<HCMX URL>:443/auth/authentication-endpoint/authenticate/token?TENANTID=<TENANTID>
Description	Replace the URL with the HCMX URL and replace the TenantID with the respective TenantID for which you need information.
URL Example	https://<HCMX URL>:443/auth/authentication-endpoint/authenticate/token?TENANTID=XXXXXXXXX
Headers
Content-Type: application/json
Accept: application/json
Body Syntax	{"login": "<username>", "password": "<password>"}
Body Example	{"login": "hcmxadmin", "password": "itom@123"}
Body Description	The login account user must be a part of DND Administrators (DND_ADMINISTRATOR) group.
The response body contains the X-Auth token for authentication.


View Fullscreen
Sample Response Data	eyJ0eXAiOiJKV1MiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyYzkwZDBhMDc3Y2U0YjNmMDE3N2NlNzRkZGYw

			MDYxNyIsImlzcyI6IklkTSAxLjMxLjIiLCJjb20uaHBlLmlkbTp0cnVzdG9yIjpudWxsLCJleHAiOjE2MTU5NjYxN

			zIsImNvbS5ocC5jbG91ZDp0ZW5hbnQiOnsiaWQiOiIyYzkwZDBhMDc3Y2U0YjNmMDE3N2NlNzQ3ZmU

			0MDVjZCIsIm5hbWUiOiI0NTQwMDIxOTkiLCJlbmFibGVkIjp0cnVlfSwicHJuIjoiQW15IiwiaWF0IjoxNjE1OT

			YyNTcyLCJqdGkiOiIzNmM1MmVmZC04YzA0LTQ0N2UtYmYwYi0wODAzYWUwNWEzYjQifQ.ZL6ily4Fm

			SYLbbDlH1YmE2Ea0qJP1YElCatbqpQl1Ng
Following is the list of APIs that you can use to interact with the DND.

Get all application properties
You can use this API to get the value of all the application properties.

The following table provides the list of parameters to run a GET API call:


View Fullscreen
API Name

GetAllApplicationProperties

Description

Get all application properties

URI

dnd/api/v1/<TENANTID>/application/property
URI Parameters

HTTP Method

GET

Request Headers

X-Auth-Token: <X-Auth-Token>

			Content-Type: application/json

			Accept: application/json

Request Body format

NA

Request body data

NA

Field Description

NA

Response format

application/json

Response example

{

			    "@total_results": 25,

			    "@start_index": 0,

			    "@items_per_page": 25,

			    "@self": "dnd/api/v1/119134535/application/property",

			    "members": [

			        {

			            "id": "79af3674bef649219b8ee8e346a50c2f",

			            "name": "application.resource_sync_action.timeout",

			            "displayName": "Application resource sync action timeout",

			            "description": "The resource synchronization action timeout in seconds.",

			            "value": "3600",

			            "defaultValue": "3600",

			            "type": "INTEGER"

			        },

        ......

        ......

			        {

			            "id": "03f5fc1cb1f4439b9d55a73ae5c45bcc",

			            "name": "integration.ucmdb.on_delete_ci.retire",

			            "displayName": "Integration ucmdb on delete CI retire",

			            "description": "UCMDB integration property. Setting this value to true, will mark the CI for aging. This setting has no effect in SMAX environment.",

			            "value": "false",

			            "defaultValue": "false",

			            "type": "BOOLEAN"

			        }

			    ]

			}

HTTP return codes

200 - OK
401 - Unauthorized
403 - Forbidden

Examples:

curl -k -X GET -H "X-Auth-Token: ${TOKEN}" -H "Content-Type: application/json" https://${HOSTNAME}:443/dnd/api/v1/119134535/application/property

Get one or more application properties by name
You can use this API to get the value of single application property using the property name.

The following table provides the list of parameters to run a GET API call:


View Fullscreen
API Name

GetApplicationPropertyFilter

Description

Get application properties by name

URI

dnd/api/v1/<TENANTID>/application/property
URI Parameters

NA

HTTP Method

POST

Request Headers

X-Auth-Token: <X-Auth-Token>
Content-Type: application/json
Accept: application/json

Request Body format

Accept: application/json

Request body data

{

			    "members": [

			        {

			            "id": "79af3674bef649219b8ee8e346a50c2f",

			            "name": "application.resource_sync_action.timeout"

			        },

			        {

			            "id": "03f5fc1cb1f4439b9d55a73ae5c45bcc",

			            "name": "integration.ucmdb.on_delete_ci.retire"

			        }

			    ]

			}

Field Description

id - The application property name of length less than equal to 255.

name - The application property name of length less than equal to 255.

Response format

application/json

Response example

{

			    "@total_results": 2,

			    "@start_index": 0,

			    "@items_per_page": 2,

			    "@self": "dnd/api/v1/119134535/application/property",

			    "members": [

			        {

			            "id": "79af3674bef649219b8ee8e346a50c2f",

			            "name": "application.resource_sync_action.timeout",

			            "displayName": "Application resource sync action timeout",

			            "description": "The resource synchronization action timeout in seconds.",

			            "value": "3600",

			            "defaultValue": "3600",

			            "type": "INTEGER"

			        },

			        {

			            "id": "03f5fc1cb1f4439b9d55a73ae5c45bcc",

			            "name": "integration.ucmdb.on_delete_ci.retire",

			            "displayName": "Integration ucmdb on delete CI retire",

			            "description": "UCMDB integration property. Setting this value to true, will mark the CI for aging. This setting has no effect in SMAX environment.",

			            "value": "false,

			            "defaultValue": "false",

			            "type": "BOOLEAN"

			        }

			    ]

			}
HTTP return codes

200 - OK
400 - Bad request
401 - Unauthorized
403 - Forbidden
404 - Not Found

Notes

Either id or name field must present. The id field takes precedence.

Examples:

curl -k -X POST -H "X-Auth-Token: ${TOKEN}" -H "Content-Type: application/json" -d '{ "members": [{ "name": "application.oo_content_root.lifecycle_action"}, {"name": "application.oo_content_root.resource_pool_sync"}]}' https://${HOSTNAME}/dnd/api/v1/119134535/application/property
Get a single application property by id
You can use this API to get the value of single application property using the property id.

You can get the property id from the response of the APIs GetApplicationPropertyFilter or GetAllApplicationProperties. The value returned for parameter id in the response is the property id.

  {
            "id": "03f5fc1cb1f4439b9d55a73ae5c45bcc",
            "name": "integration.ucmdb.on_delete_ci.retire",
            "displayName": "Integration ucmdb on delete CI retire",
            "description": "UCMDB integration property. Setting this value to true, will mark the CI for aging. This setting has no effect in SMAX environment.",
            "value": "false",
            "defaultValue": "false",
            "type": "BOOLEAN"
        }
The following table provides the list of parameters to run a GET API call:


View Fullscreen
API Name

GetApplicationProperty

Description

Get application property by id

URI

dnd/api/v1/<TENANTID>/application/property{id}

URI Parameters

id - The id of the application property

HTTP Method

GET

Request Headers

X-Auth-Token: <X-Auth-Token>

			Content-Type: application/json

			Accept: application/json

Request Body format

NA

Request body data

NA

Field Description

NA

Response format

application/json

Response example

{

  "id": "79af3674bef649219b8ee8e346a50c2f",

			  "name": "application.resource_sync_action.timeout",

			  "displayName": "Application resource sync action timeout",

			  "description": "The resource synchronization action timeout in seconds.",

			  "value": "3600",

			  "defaultValue": "3600",

			  "type": "INTEGER",

			}

Error response:

{

			  "exception": {

			    "stacktrace": "com.hp.ccue.http.exception.HttpNotFoundException: No row with the given identifier exists: ......",

			    "message": "No row with the given identifier exists: [com.hp.csa.model.impl.common.ApplicationProperty#79af3674bef649219b8ee8e346a50c2f00]"

			  },

			  "code": "NotFound",

			  "csa_args": null

			}

HTTP return codes

200 - OK
401 - Unauthorized
403 - Forbidden
404 - Not Found

Examples:

curl -k -X GET -H "X-Auth-Token: ${TOKEN}" https://${HOSTNAME}:443/dnd/api/v1/119134535/application/property/79af3674bef649219b8ee8e346a50c2f

Note: Get X-Auth-Token, ${TOKEN} IDM service.

Example: curl -k -X POST --user transport_admin:${IDM_TRANSPORT_PASSWORD} -H "Content-Type: application/json" -d '

			{ "passwordCredentials": { "username": "dndadmin", "password": "CloudNext" }, "tenantName": "119134535" }

			' https://${HOSTNAME}:5443/idm-service/v2.0/tokens

Update a single application property by id
You can use this API to update the value of single application property.

The following table provides the list of parameters to run a PUT API call:


View Fullscreen
API Name

UpdateApplicationProperty

Description

Update single application property

URI

dnd/api/v1/<TENANTID>/application/property/{id}

URI Parameters

id - The id of the application property

HTTP Method

PUT

Request Headers

X-Auth-Token: <X-Auth-Token>

			Content-Type: application/json

			Accept: application/json

Request Body format

Accept: application/json

Request body data

{

			    "value": "7200"

			}

Field Description

value - The application property name of length less than equal to 4000

Response format

application/json

Response example

{

			  "id": "79af3674bef649219b8ee8e346a50c2f",

			  "name": "application.resource_sync_action.timeout",

			  "displayName": "Application resource sync action timeout",

			  "description": "The resource synchronization action timeout in seconds.",

			  "value": "7200",

			  "defaultValue": "3600",

			  "type": "INTEGER",

			}

HTTP return codes

200 - OK
400 - Bad request
401 - Unauthorized
403 - Forbidden
404 - Not Found

Notes

The system will update only data on the value field in the database and ignore other fields.

Examples:

curl -k -X PUT -H "X-Auth-Token: ${TOKEN}" -H "Content-Type: application/json" -d '{ "value": "7200" }' https://${HOSTNAME}/dnd/api/v1/119134535/application/property/79af3674bef649219b8ee8e346a50c2f
Update a list of application properties
You can use this API to update a set of application properties.

The following table provides the list of parameters to run a PUT API call:


View Fullscreen
API Name

UpdateApplicationProperties

Description

Update a list of application properties

URI

dnd/api/v1/<TENANTID>/application/property
URI Parameters

NA

HTTP Method

PUT

Request Headers

X-Auth-Token: <X-Auth-Token>

			Content-Type: application/json

			Accept: application/json

Request Body format

Accept: application/json

Request body data

{

			    "members": [

			        {

			            "id": "79af3674bef649219b8ee8e346a50c2f",

			            "name": "application.resource_sync_action.timeout",

			            "value": "7201"

			        },

			        {

			            "name": "integration.ucmdb.on_delete_ci.retire",

			            "value": "false"

			        }

			    ]

			}

Field Description

id- The application property name of length less than equal to 255.

value - The application property name of length less than equal to 255.

Response format

application/json

Response example

{

			    "@total_results": 2.0,

			    "@start_index": 0.0,

			    "@items_per_page": 2.0,

			    "@self": "dnd/api/v1/119134535/application/property",

			    "members": [

			        {

			            "id": "79af3674bef649219b8ee8e346a50c2f",

			            "name": "application.resource_sync_action.timeout",

			            "displayName": "Application resource sync action timeout",

			            "description": "The resource synchronization action timeout in seconds.",

			            "value": "7201",

			            "defaultValue": "3600",

			            "type": "INTEGER"

			        },

			        {

			            "id": "03f5fc1cb1f4439b9d55a73ae5c45bcc",

			            "name": "integration.ucmdb.on_delete_ci.retire",

			            "displayName": "Integration UCMDB on delete CI retire",

			            "description": "If set to true, the CI for a component in a service instance will be marked for aging when the component is finalized after an instance is canceled. This setting is ignored in a SMAX environment.",

			            "value": "false",

			            "defaultValue": "false",

			            "type": "BOOLEAN"

			        }

			    ]

			}

HTTP return codes

200 - OK
400 - Bad request
401 - Unauthorized
403 - Forbidden
404 - Not Found

Notes

Either id or name field must be present. The id field takes precedence.
The system will update only data on the value field in the database and ignore other fields.

Examples:

curl -k -X PUT -H "X-Auth-Token: ${TOKEN}" -H "Content-Type: application/json" -d '

			{

			"members": [

			{

			"name": "application.oo_content_root.lifecycle_action",

			"value": "/Library/CSA Content Pack,/Library/Integrations,/Library/io"

			},

			{

			"name": "application.oo_content_root.resource_pool_sync",

			"value": "/Library/CSA Content Pack,/Library/Integrations,/Library/io"

			}

			]

			}

			' https://${HOSTNAME}/dnd/api/v1/119134535/application/property

Cloud Subscription Management APIs
Updated on Sep 29, 2022
Using Cloud Subscription Management APIs, you can generate data from the suite which can be used to build your own user interface with ease.

The following APIs are available:

GET Offering API
Service Request Lifecycle Management
You can access these APIs after installing/upgrading the suite and enabling the DND capability. See Consumption Management APIs

Content Store API
Updated on Apr 28, 2022
On this page
Content Store APIs
Generate Authorization token
GET
Parameters
Response messages
Sample response body
Show more
Content Store APIs offer direct interaction with the Content Store. You have the choice of either using the Content Store GUI to install and explore the content in it or you can access the Content Store APIs to install the content.

Content Store APIs
Following is the list of APIs that you can use to interact with the Content Store:

GET: You can use this API to retrieve a list of all the capsules present in the Content Store database.
POST: You can use this API to install a capsule to the Content Store.
GET (Content ID): You can use this API to retrieve capsules using the Content ID.
DELETE: You can use this API to uninstall a capsule.
Generate Authorization token
Open the Postman application and select the POST API call from the drop-down menu.
Enter the IdM token URL.
Go to the Authorization tab.
Set the Authorization type as BasicAuth.
Enter the transport_admin username and password that's related to the IdM service.

Go to the Body tab.
In the request body, include the username and password (related to the tenant, that is, DND or HCMX) in JSON format. For example:

The tenantName is a constant. Its value is same as the value of the tenantId, which depends on the HCMX or DND environment you are using.
Click Send to generate the token. This image shows an example of the authentication token:

The token remains valid for 20-25 minutes.
Search the response body for CS_REST. The CS_REST permission appears for users who have the access to the Content Store APIs. The user must have the appropriate permissions to exercise the Content Store API calls.

To make the Content Store API calls, go to the Headers tab. Add the Cookie key and enter the token.id value by prefixing "X-AUTH-TOKEN=" before the token value.

GET
You can use this API to retrieve a list of all the capsules present in the Content Store database.

Parameters
The following table provides the list of parameters to run a GET API call:


View Fullscreen
Parameter	Description
Request name	GET
Content type	application/json
Authorization	Pass the Cookie key in the Headers tab. See the Generate authorization token section.
Request URL
https://<host>/content-store-gateway/v1/<tenant ID>/content-packages
Page token	0 (default value)
Specify the number of pages to skip before collecting the results.
Page size	50 (default value)
Specify the number of results on a page.
Order by	updateDate (default value)
Specify the order in which the results should appear. For example, order the results by the latest update date.

Response messages

View Fullscreen
HTTP status code	Reason
200 Success	Successful API call transaction
400 Bad request	Invalid input, object invalid
401 Unauthorized	Invalid X-Auth-Token
403 Authorization failure	CS_REST permission isn't attached
404 Not found	API service is down
405 Not allowed	Wrong URL or operations
500 System error	System error message
Sample response body
{
    "nextPageToken": "0",
    "totalSize": 5,
    "count": 5,
    "items": [
        {
            "id": "2b00da57b3e7464982358e6b328ebe8f",
            "contentId": "9c678675-1c38-4f69-9b98-6a28112f6e1c",
            "contentName": "Capsule Google GCP Integration",
            "displayName": "Capsule Google GCP Integration",
            "version": "2.3.3",
            "description": "This sequenced model integration demonstrates various services of Google Cloud Resources.",
            "publisher": "Micro Focus",
            "signatureDetails": {
                "signStatus": "Trusted",
                "signedBy": "AAA Certificate Services",
                "certs": [
                    {
                        "certType": "X.509",
                        "certDn": "CN=Micro Focus Group Limited, O=Micro Focus Group Limited, STREET=\"The Lawn, 22-30 Old Bath Road\", L=Newbury, ST=Berkshire, OID.2.5.4.17=RG14 1QN, C=GB",
                        "validityFrom": "1613088000000",
                        "validityNotAfter": "1707782399000",
                        "validityNotBefore": "0"
                    },
                    {
                        "certType": "X.509",
                        "certDn": "CN=Sectigo RSA Code Signing CA, O=Sectigo Limited, L=Salford, ST=Greater Manchester, C=GB",
                        "validityFrom": "1541116800000",
                        "validityNotAfter": "1924991999000",
                        "validityNotBefore": "0"
                    },
                    {
                        "certType": "X.509",
                        "certDn": "CN=USERTrust RSA Certification Authority, O=The USERTRUST Network, L=Jersey City, ST=New Jersey, C=US",
                        "validityFrom": "1552348800000",
                        "validityNotAfter": "1861919999000",
                        "validityNotBefore": "0"
                    }
                ]
            },
            "productCompatibilityMatrix": "[Cloud Service Automation : 4.92, Operations Orchestration : 10.85]",
            "updateTime": "2021-05-03T08:54:52Z",
            "status": "installed",
            "statusMessage": "Content installed successfully !",
            "nfsPath": "/opt/data/contentstore/12345/content-packages/CC-Google-GCP-Integration-2.3.3.zip",
            "metadata": "{\"update\":true, \"preserveExisting\":false, \"associateProviders\":true}",
            "types": null,
            "items": [
                {
                    "id": "e5671d47e32440e0b873d09d233b276d",
                    "name": "CSA-INTEGRATIONS OO Content available",
                    "status": "success",
                    "statusMessage": "CSA-INTEGRATIONS : Selected version - 4.70.0008 is already available in Central. Same version of OO content is already available in Central"
                }
            ]
        },
        {
            "id": "22a9af23926043f2aad9f08cb703f72d",
            "contentId": "bc112dc3-1974-a499-b896-c1e6a43d2263",
            "contentName": "Capsule Microsoft Azure CIType",
            "displayName": "Capsule Microsoft Azure CIType",
            "version": "18.7.0",
            "description": "This sequenced model integration demonstrates various services of Microsoft Azure(Resource Manager Model) ",
            "publisher": "Micro Focus",
            "signatureDetails": {
                "signStatus": "Trusted",
                "signedBy": "AAA Certificate Services",
                "certs": [
                    {
                        "certType": "X.509",
                        "certDn": "CN=Micro Focus Group Limited, O=Micro Focus Group Limited, STREET=\"The Lawn, 22-30 Old Bath Road\", L=Newbury, ST=Berkshire, OID.2.5.4.17=RG14 1QN, C=GB",
                        "validityFrom": "1613088000000",
                        "validityNotAfter": "1707782399000",
                        "validityNotBefore": "0"
                    },
                    {
                        "certType": "X.509",
                        "certDn": "CN=Sectigo RSA Code Signing CA, O=Sectigo Limited, L=Salford, ST=Greater Manchester, C=GB",
                        "validityFrom": "1541116800000",
                        "validityNotAfter": "1924991999000",
                        "validityNotBefore": "0"
                    },
                    {
                        "certType": "X.509",
                        "certDn": "CN=USERTrust RSA Certification Authority, O=The USERTRUST Network, L=Jersey City, ST=New Jersey, C=US",
                        "validityFrom": "1552348800000",
                        "validityNotAfter": "1861919999000",
                        "validityNotBefore": "0"
                    }
                ]
            },
            "productCompatibilityMatrix": "[Cloud Service Automation : 4.92, Operations Orchestration : 10.70]",
            "updateTime": "2021-05-03T09:00:28Z",
            "status": "installed",
            "statusMessage": "Content installed successfully !",
            "nfsPath": "/opt/data/contentstore/12345/content-packages/CC-Microsoft-Azure-CIType-18.7.0.zip",
            "metadata": "{\"update\":true, \"preserveExisting\":false, \"associateProviders\":true}",
            "types": null,
            "items": []
        },
        {
            "id": "bc6e3c8130c449c18160f585cca5102f",
            "contentId": "a88dd597-cea0-24a7-1921-e60066394a3e",
            "contentName": "Capsule VMware vCenter CIType",
            "displayName": "Capsule VMware vCenter CIType",
            "version": "18.3.1",
            "description": "This sequenced model integration demonstrates how to deploy virtual machines using VMWare vCenter server and flex resources such as the number of processors or memory.",
            "publisher": "Micro Focus",
            "signatureDetails": {
                "signStatus": "Trusted",
                "signedBy": "USERTrust RSA Certification Authority",
                "certs": [
                    {
                        "certType": "X.509",
                        "certDn": "CN=Micro Focus Group Limited, O=Micro Focus Group Limited, STREET=\"The Lawn, 22-30 Old Bath Road\", L=Newbury, ST=Berkshire, OID.2.5.4.17=RG14 1QN, C=GB",
                        "validityFrom": "1582848000000",
                        "validityNotAfter": "1646006399000",
                        "validityNotBefore": "0"
                    },
                    {
                        "certType": "X.509",
                        "certDn": "CN=Sectigo RSA Code Signing CA, O=Sectigo Limited, L=Salford, ST=Greater Manchester, C=GB",
                        "validityFrom": "1541116800000",
                        "validityNotAfter": "1924991999000",
                        "validityNotBefore": "0"
                    },
                    {
                        "certType": "X.509",
                        "certDn": "CN=USERTrust RSA Certification Authority, O=The USERTRUST Network, L=Jersey City, ST=New Jersey, C=US",
                        "validityFrom": "1264982400000",
                        "validityNotAfter": "2147471999000",
                        "validityNotBefore": "0"
                    }
                ]
            },
            "productCompatibilityMatrix": "[Cloud Service Automation : 4.80, Operations Orchestration : 10.70, Codar : 1.81]",
            "updateTime": "2021-05-03T08:59:57Z",
            "status": "installed",
            "statusMessage": "Content installed successfully !",
            "nfsPath": "/opt/data/contentstore/12345/content-packages/CC-vCenter-Compute-CIType-18.3.1.zip",
            "metadata": "{\"update\":true, \"preserveExisting\":false, \"associateProviders\":true}",
            "types": null,
            "items": [
                {
                    "id": "e81d26b563ce4966934b969c555164c4",
                    "name": "Base Utility OO Content available",
                    "status": "success",
                    "statusMessage": "Base Utility : Selected version - 17.9.11 is already available in Central. Same version of OO content is already available in Central"
                }
            ]
        },
POST
You can use this API to upload and install the capsule to the Content Store from your local file system. This API installs trusted capsules signed by a certification authority. This is an asynchronous API call.

Parameters
The following table provides the list of parameters to run a POST API call:


View Fullscreen
Parameter	Description
Request name	POST
Authorization	Pass the Cookie key in the Headers tab. See the Generate authorization token section.
Request URL
https://<host>/content-store-gateway/v1/<tenant ID>/content-packages
File	Choose a capsule ZIP file from your local file system
Metadata
{"update":true, "preserveExisting":false, "associateProviders":true}

If you set the value of preserveExisting to True, the artifacts already installed in your environment will be retained. If you set the value to False, the older artifacts will be overwritten.

Response messages

View Fullscreen
HTTP status code	Reason
202 Accepted	The request gets accepted and the artifacts are deployed asynchronously
400 Bad values	Invalid ZIP file
401 Unauthorized	Invalid X-Auth-Token
403 Authorization failure	CS_REST permission isn't attached
404 Not found	Wrong URL
409 Conflict	If you make an API call to install a capsule while you are installing the same capsule, this error appears.
Example response body
{
  "id": "bd3f37c89a4145cf8adb74a983bb07f3",
  "contentId": "9c678675-1c38-4f69-9b98-6a28112f6e1c",
  "contentName": "Capsule Google GCP Integration",
  "displayName": "Capsule Google GCP Integration",
  "version": "2.1.1",
  "description": "Support for Google Compute Engine public cloud provider using CSA sequence service designs .",
  "publisher": "Micro Focus",
  "signatureDetails": {
    "signStatus": "Trusted",
    "signedBy": "USERTrust RSA Certification Authority",
    "certs": [
      {
        "certType": "X.509",
        "certDn": "CN=Micro Focus Group Limited, O=Micro Focus Group Limited, STREET=\"The Lawn, 22-30 Old Bath Road\", L=Newbury, ST=Berkshire, OID.2.5.4.17=RG14 1QN, C=GB",
        "validityFrom": "1582848000000",
        "validityNotAfter": "1646006399000",
        "validityNotBefore": "0"
      },
      {
        "certType": "X.509",
        "certDn": "CN=Sectigo RSA Code Signing CA, O=Sectigo Limited, L=Salford, ST=Greater Manchester, C=GB",
        "validityFrom": "1541116800000",
        "validityNotAfter": "1924991999000",
        "validityNotBefore": "0"
      },
      {
        "certType": "X.509",
        "certDn": "CN=USERTrust RSA Certification Authority, O=The USERTRUST Network, L=Jersey City, ST=New Jersey, C=US",
        "validityFrom": "1264982400000",
        "validityNotAfter": "2147471999000",
        "validityNotBefore": "0"
      }
    ]
  },
  "productCompatibilityMatrix": "[Operations Orchestration : 10.70, Codar : 1.00, Cloud Service Automation : 4.91]",
  "updateTime": "2020-06-17T12:09:50Z",
  "status": "ready to install",
  "statusMessage": "Content installed successfully !",
  "nfsPath": "/opt/data/contentstore/12345/content-packages/CC-Google-GCP-Integration-2.1.1.zip",
  "metadata": "{\"update\":true, \"preserveExisting\":false, \"associateProviders\":true}",
  "types": null,
  "items": [
    {
      "id": "3db93842ae094ab5b851110450944b67",
      "name": "Base Utility OO Content available",
      "status": "success",
      "statusMessage": "Base Utility : Selected version - 17.9.9 : A higher version of this OO content is already available in Central: "
    },
    {
      "id": "b99beed04969429f8a89c329dc21e99f",
      "name": "CSA-INTEGRATIONS OO Content available",
      "status": "success",
      "statusMessage": "CSA-INTEGRATIONS : Selected version - 4.70.0006 : A higher version of this OO content is already available in Central: "
    },
    {
      "id": "78eb653f81d0485eb31e0cbaa71c04e9",
      "name": "csa-google-compute-engine OO Content available",
      "status": "success",
      "statusMessage": "csa-google-compute-engine : Selected version - 1.1.0 is already available in Central. Same version of OO content is already available in Central"
    }
  ]
}
GET (Content ID)
You can use this API to retrieve the capsules based on the Content ID. Content ID is the same for all the versions of a capsule. This API will list out all the versions with the same Content ID.

Parameters
The following table provides the list of parameters to run a GET API call:


View Fullscreen
Parameter	Description
Request name	GET
Content type	application/json
Authorization	Pass the Cookie key in the Headers tab. See the Generate authorization token section.
Request URL
https://<host>/content-store-gateway/v1/<tenant ID>/content-packages/<contentId>
Content ID	Specify the Content ID (required field). You can specify multiple content IDs separated by a comma to list more than one capsules.
Fields	Specify additional attributes to appear in the result.

Response messages

View Fullscreen
HTTP status code	Reason
200 Success	 Successful API call transaction
400 Bad request	Invalid content ID format
401 Unauthorized	Invalid X-Auth-Token
403 Authorization failure	CS_REST permission isn't attached
404 Content not found	API service is down
Sample response body
{
    "content": [
        {
            "id": "2b00da57b3e7464982358e6b328ebe8f",
            "contentId": "9c678675-1c38-4f69-9b98-6a28112f6e1c",
            "contentName": "Capsule Google GCP Integration",
            "displayName": "Capsule Google GCP Integration",
            "version": "2.3.3",
            "description": "This sequenced model integration demonstrates various services of Google Cloud Resources.",
            "publisher": "Micro Focus",
            "signatureDetails": {
                "signStatus": "Trusted",
                "signedBy": "AAA Certificate Services",
                "certs": [
                    {
                        "certType": "X.509",
                        "certDn": "CN=Micro Focus Group Limited, O=Micro Focus Group Limited, STREET=\"The Lawn, 22-30 Old Bath Road\", L=Newbury, ST=Berkshire, OID.2.5.4.17=RG14 1QN, C=GB",
                        "validityFrom": "1613088000000",
                        "validityNotAfter": "1707782399000",
                        "validityNotBefore": "0"
                    },
                    {
                        "certType": "X.509",
                        "certDn": "CN=Sectigo RSA Code Signing CA, O=Sectigo Limited, L=Salford, ST=Greater Manchester, C=GB",
                        "validityFrom": "1541116800000",
                        "validityNotAfter": "1924991999000",
                        "validityNotBefore": "0"
                    },
                    {
                        "certType": "X.509",
                        "certDn": "CN=USERTrust RSA Certification Authority, O=The USERTRUST Network, L=Jersey City, ST=New Jersey, C=US",
                        "validityFrom": "1552348800000",
                        "validityNotAfter": "1861919999000",
                        "validityNotBefore": "0"
                    }
                ]
            },
            "productCompatibilityMatrix": "[Cloud Service Automation : 4.92, Operations Orchestration : 10.85]",
            "updateTime": "2021-05-03T08:54:52Z",
            "status": "installed",
            "statusMessage": "Content installed successfully !",
            "nfsPath": "/opt/data/contentstore/12345/content-packages/CC-Google-GCP-Integration-2.3.3.zip",
            "metadata": "{\"update\":true, \"preserveExisting\":false, \"associateProviders\":true}",
            "types": null,
            "items": [
                {
                    "id": "e5671d47e32440e0b873d09d233b276d",
                    "name": "CSA-INTEGRATIONS OO Content available",
                    "status": "success",
                    "statusMessage": "CSA-INTEGRATIONS : Selected version - 4.70.0008 is already available in Central. Same version of OO content is already available in Central"
                }
            ]
        },
        {
            "id": "22a9af23926043f2aad9f08cb703f72d",
            "contentId": "bc112dc3-1974-a499-b896-c1e6a43d2263",
            "contentName": "Capsule Microsoft Azure CIType",
            "displayName": "Capsule Microsoft Azure CIType",
            "version": "18.7.0",
            "description": "This sequenced model integration demonstrates various services of Microsoft Azure(Resource Manager Model) ",
            "publisher": "Micro Focus",
            "signatureDetails": {
                "signStatus": "Trusted",
                "signedBy": "AAA Certificate Services",
                "certs": [
                    {
                        "certType": "X.509",
                        "certDn": "CN=Micro Focus Group Limited, O=Micro Focus Group Limited, STREET=\"The Lawn, 22-30 Old Bath Road\", L=Newbury, ST=Berkshire, OID.2.5.4.17=RG14 1QN, C=GB",
                        "validityFrom": "1613088000000",
                        "validityNotAfter": "1707782399000",
                        "validityNotBefore": "0"
                    },
                    {
                        "certType": "X.509",
                        "certDn": "CN=Sectigo RSA Code Signing CA, O=Sectigo Limited, L=Salford, ST=Greater Manchester, C=GB",
                        "validityFrom": "1541116800000",
                        "validityNotAfter": "1924991999000",
                        "validityNotBefore": "0"
                    },
                    {
                        "certType": "X.509",
                        "certDn": "CN=USERTrust RSA Certification Authority, O=The USERTRUST Network, L=Jersey City, ST=New Jersey, C=US",
                        "validityFrom": "1552348800000",
                        "validityNotAfter": "1861919999000",
                        "validityNotBefore": "0"
                    }
                ]
            },
            "productCompatibilityMatrix": "[Cloud Service Automation : 4.92, Operations Orchestration : 10.70]",
            "updateTime": "2021-05-03T09:00:28Z",
            "status": "installed",
            "statusMessage": "Content installed successfully !",
            "nfsPath": "/opt/data/contentstore/12345/content-packages/CC-Microsoft-Azure-CIType-18.7.0.zip",
            "metadata": "{\"update\":true, \"preserveExisting\":false, \"associateProviders\":true}",
            "types": null,
            "items": []
        }
    ]
}
Uninstall content (DELETE)
You can use this API to uninstall a capsule based on the Content ID and version of the capsule.

Parameters
The following table provides the list of parameters to run a DELETE API call:


View Fullscreen
Parameter	Description
Request name	DELETE
Authorization	Pass the Cookie key in the Headers tab. See the Generate authorization token section.
Request URL	Example request URL for a DELETE call:
https://<host>/content-store-gateway/v1/<tenant id>/content-packages/<contentId>/<contentVersion>
Content ID	Specify the content ID (required field).
Content version	Specify the highest version of the capsule you want to uninstall (required field).

Response messages

View Fullscreen
HTTP status code	Reason
204 Success	 Successful API call transaction
400 Bad request	Invalid content ID format
401 Unauthorized	Invalid X-Auth-Token
403 Authorization failure	CS_REST permission isn't attached
404 Content not found	API service is down
409 Conflict	If you make an API call to install a capsule while you are installing the same capsule, this error appears.
Response body
You will see a 204 success code.

Uninstall scenarios
Following are the scenarios where the uninstall process is aborted and the API displays a message with the reason for aborting the uninstallation:

When you try to uninstall a capsule while the same capsule is being installed.
When you try to uninstall any version other than the highest version of a capsule.
When you try to uninstall a capsule that has a published service design.
When you try to uninstall a capsule that has a deployment with an instance in active, provisioning, or failed state.
Content Store tenant APIs
These APIs help to:

Configure DND and OO access points
Configure tenant specific information
Check and change capsule signature levels
Configure tenant
Tenant admin (user with CS_TENANT_ADMIN permission) can use this API to configure a tenant in Content Store.

Parameters
The following table provides the list of parameters to run a PUT API call:


View Fullscreen
Parameter	Description
Request name	PUT
Authorization	X-Auth-Token
Request URL	Example request URL for a PUT call:
https://<host>/content-store-gateway/v1/<tenant id>/configure
Response body
{

    {

dndTransportUser: "dndtransportuser_101010101",
dndTransportPasswordKey: "IDM_USER_DNDTRANSPORTUSER_PASSWORD_KEY",
dndTransportPasswordApprole: "<dnd transport password app role>",
dndEndpoint: "https://<dnd-svc-host>:<dnd_port>/dnd",
ooTransportUser: "dndtransportuser_101010101",
ooTransportPasswordKey: "IDM_USER_DNDTRANSPORTUSER_PASSWORD_KEY",
ooTransportPasswordApprole: "<OO transport password app role>",
ooEndpoint: "https://<oo_external_host>:<oo_port>/oo",
contentSignatureLevel: ""

}

}
Response message	204 Success

Get Tenant Configuration
Tenant admin (user with CS_TENANT_ADMIN permission) can use this API to get configuration details of a tenant in Content Store.


View Fullscreen
Parameter	Description
Request name	GET
Authorization	X-Auth-Token
Request URL	Example request URL for a GET call:
https://<host>/content-store-gateway/v1/<tenant id>/configure
Response body
{

dndTransportUser: "dndtransportuser_101010101",
dndTransportPasswordKey: "IDM_USER_DNDTRANSPORTUSER_PASSWORD_KEY",
dndTransportPasswordApprole: "<DND transport password app role>",
dndEndpoint: "https://<dnd-svc-host>:<dnd_port>/dnd",
ooTransportUser: "dndtransportuser_101010101",
ooTransportPasswordKey: "IDM_USER_DNDTRANSPORTUSER_PASSWORD_KEY",
ooTransportPasswordApprole: "<OO transport password app role>",
ooEndpoint: "https://<oo_external_host>:<oo_port>/oo",
contentSignatureLevel: "ALLOW_TRUSTED"

}
Response message	200 Success

SAM license rule APIs
Updated on Jan 18, 2023
On this page
What's license rule
Script security
Develop a license rule script
Part 1: Package definition
Part 2: Implement the standard ConsumptionCalculator interface
Part 3: Implement the calculation method
Show more
This section describes how to extend SAM's license rules through programming. SAM supports license rule extension by providing the capability of creating license rules and the corresponding rule scripts. For more information about how to create license rules, see License rules.

What's license rule
A rule script implements the algorithms of license consumption calculation. It focuses on a particular resource unit and generates one valid result. The resource unit can be a software instance, an OSE, a physical device, or other devices, depending on the license terms of the product. The following example uses the Microsoft license terms.

Server licenses (per instance): Customers might use one running software instance in either a physical or virtual OSE deployed on a licensed server for each license. If a license rule is created for products of this metric, the rule must be implemented on an OSE.

Script security
The license rules provided by SAM are developed using groovy scripts. The script can do almost everything that Java can do. SAM defines a class allowlist to prevent problematic scripts or even malicious code from harming the service. During scripting, make sure you only use the allowlisted classes. For more information, see the following Class allowlist for scripting section.

Develop a license rule script
After you create a new license rule, SAM automatically generates a rule script from an OOTB template. The OOTB template varies according to license metrics. You can edit the code in the generated script for your own algorithm.

A valid rule script contains the following parts:

Part 1: Package definition
Part 2: Implement the standard ConsumptionCalculator interface
Part 3: Implement the calculate method
Part 4: Parameter ParamPerUnit
Part 5: Implement the license rule
Part 6: Consumption result
Part 7: Return the result
The following figure shows an example script:



Part 1: Package definition
You must define a script class within a package that starts with “script.licenserule”. For example, “script.licenserule” and “script.licenserule.oracle” are valid package names, and “script” and “script.licenserules” are invalid package names. SAM logs an error if an invalid package name is used in the rule script.

Part 2: Implement the standard ConsumptionCalculator interface
For SAM to recognize your groovy script as a valid license rule, make sure the com.microfocus.sam.model.calc.ConsumptionCalculator interface is implemented in the script.

The default rule script has a class that implements the interface defined in the script. It resembles the following:
class GenRulePerCore implements ConsumptionCalculator

You can change the class name, but make sure it's unique.

Part 3: Implement the calculation method
You must implement the calculation method that allows throwing the ComplianceCalculateException exception. The ParamPerUnit context stores all necessary information in the license rule.

List<ComplianceAnalysis> calculate(ParamPerUnit param) throws ComplianceCalculateException

Part 4: Parameter ParamPerUnit
The ParamPerUnit parameter contains CI data. Depending on the license metric of the rule, the parameter can be an instance of the com.microfocus.sam.model.params.ParamPerHost and com.microfocus.sam.model.params.ParamPerOSE classes. The following table shows the relationships between the object type of the ParamPerUnit instance and the license metric.


View Fullscreen
License metric	Object type of instance ParamPerUnit	Scenario
OOTB
“Per installation” metric

com.microfocus.sam.model.params.ParamPerOSE	ParamPerOSE contains the data of VMs/physical devices and the software instances directly running on them.
The rule calculates the total number of software installations on the device.

OOTB “Per OSE”
metric

com.microfocus.sam.model.params.ParamPerOSE	ParamPerOSE contains the data of VMs/physical devices and the software instances directly running on them.
The rule calculates the license consumption of the device, not of each instance.

OOTB "Named user" metric	com.microfocus.sam.model.params.ParamPerPerson
ParamPerPerson contains the data of users and the software instances are running on the devices managed by the user.

The rule calculates the license consumption of the person, not of each instance or device.

OOTB "Per device" metric	com.microfocus.sam.model.params.ParamPerHost	ParamPerHost contains the data of physical devices/VMs along with their hosts and the software instances running on them.
The rule calculates the license consumption of the entire host, not of each instance or OSE.

OOTB "Per core" metric	com.microfocus.sam.model.params.ParamPerHost
ParamPerHost contains the data of physical devices/VMs along with their hosts and the software instances running on them. Note that the required data of physical cores comes from the physical devices.

The rule calculates the license consumption of the entire host, not of each instance or OSE.

As shown in the following examples, you can cast the parameter in the script to a proper object type and invoke methods to get the required CI data. Note that the software list grabbed via the following parameters only refers to the software that you selected to calculate its license consumption. This information is all you need in a calculation. For more information about APIs, see the following Classes and APIs for scripting section.

ParamPerOSE
Node node =((ParamPerOSE) param).getNode()

//get software list installed on the OSE directly
List<SoftwareInstance> softs = node.getSoftwareInstances()
List<Software> softwareList = ((ParamPerOSE) param).getSoftwareList()
ParamPerHost
Node node =((ParamPerHost) param). getHost()

//get software list installed on the Host directly
List<SoftwareInstance> softs = node.getSoftwareInstances()

//get software list on the host and virtual machines
List<Software> softwareList = ((ParamPerHost) param).getSoftwareList()
ParamPerPerson

Person person = ((ParamPerPerson) param).getUnitCI()

//get software list on devices owned by user
List<Software> softwareList = ((ParamPerPerson) param).getSoftwareList()
Part 5: Implement the license rule
You can refer to the licensing guide of the corresponding publisher to implement your own rules.

Part 6: Consumption result
After SAM calculates the number of consumption points, an instance of the com.microfocus.sam.model.vo.compliance.ComplianceAnalysis class needs to be created and returned together with the consumption result. The object type returned varies according to the license metric.

This table lists the mappings between the license metrics and the object types returned.


View Fullscreen
License metric	Instance object type returned	Description
OOTB
“Per installation” metric

com.microfocus.sam.model.vo.compliance.NodeComplianceAnalysis	The instance returned stands for the consumption result of the device that's provided in the ParamPerOSE parameter.
OOTB
“Per OSE” metric

com.microfocus.sam.model.vo.compliance.NodeComplianceAnalysis	The instance returned stands for the consumption result of the device that's provided in the ParamPerOSE parameter.
OOTB "Named user" metric	com.microfocus.sam.model.vo.compliance.PersonComplianceAnalysis	The instance returned stands for the consumption result of the person that's provided in the ParamPerPerson parameter.
OOTB "Per device" metric/OOTB "Per core" metric	com.microfocus.sam.model.vo.compliance.NodeCompliance Analysis	The instance returned stands for the consumption result of the host that's provided in the ParamPerHost parameter.
It can contain multiple NodeComplianceAnalysis records. Each record is related to a VM where the software instances are located. These NodeComplianceAnalysis records are used for further analysis.

Method related to the consumption result
setConsumptionPoints: Sets the number of consumption points for the compliance analysis result.

Example: analysis.setConsumptionPoints(iTotalConsumptionPoints)

In this example, analysis can be NodeComplianceAnalysis.

Part 7: Return result
After being created and assigned with proper values, the instance of the com.microfocus.sam.model.vo.compliance.ComplianceAnalysis class needs to be returned.

Example: return hostAnalysis

Return two sets of consumption result in one license rule
A product version might have different licensing options. From SMAX 2020.11, SAM can return two sets of consumption result in one license rule. For example, a SQL Server Enterprise Edition application running on a virtual machine can be licensed either by the Licensing by all physical cores option or the Licensing individual virtual machine option, and an IBM DB2 application can be licensed either by PVU Sub-capacity or PVU Full-capacity. You can get a result for each licensing option and use one result for later compliance calculation.



Part 1: Calculate two sets of result
When a product version has multiple licensing options, SAM can return two result sets for each option.

Part 2: Save two sets of result
Methods related to the consumption results:

setConsumption1: Sets the number of consumption points for result 1.
setConsumption2: Sets the number of consumption points for result 2.
By using the following methods, you can configure licensing option descriptions for each consumption result, which is presented as the display label on SAM UI (Analysis > Consumption > Details).

setConsumption1Desc: Describes the licensing option for result 1.
setConsumption2Desc: Describes the licensing option for result 2.


Part 3: Select one result for subsequent compliance calculation
If two result sets exist, select one of them for later compliance calculation using the following method:

setChosenOption: Indicates the consumption result that's used for compliance calculation. Valid values include 1 and 2. The default value is 1.

For a given license rule, we recommend that you assign the same licensing option description for the same consumption result set, as shown in the following figure. By default, result 1 is used for compliance calculation. However, you can use the setChosenOption method to choose your desired consumption result for compliance calculation.



Use logs in a script
A license rule script can write information to a log file for debugging and diagnostic purposes. To do that, you must define the logger object first. An example script resembles the following:

class YOUR_CLASS implements ConsumptionCalculator {
Logger log = LoggerFactory.getLogger(this.class)
List<ComplianceAnalysis> calculate(ParamPerUnit param) throws
CalculateException {
……
log.debug(“This is debug info”)
……
}
}
Class allowlist for scripting
In SAM, you can use the following allowlisted classes in a license rule script.

java.lang.Object
java.lang.String
java.lang.Long
java.lang.Integer
java.lang.Double
java.lang.Boolean
java.lang.Byte
java.lang.Character
java.lang.Enum
java.lang.Math
java.lang.Number
java.lang.Float
java.lang.StringBuffer
java.lang.StringBuilder
java.math.BigDecimal
java.math.BigInteger
java.util.ArrayList
java.util.Arrays
java.util.Collection
java.util.Collections
java.util.Date
java.util.HashMap
java.util.HashSet
java.util.Hashtable
java.util.Iterator
java.util.List
java.util.Locale
java.util.Map
java.util.Set
java.util.StringTokenizer
java.util.TimeZone
java.util.UUID
java.util.stream.Collector
java.util.stream.Collectors
java.util.stream.Stream
java.util.stream.Streams
org.slf4j.Logger
org.slf4j.LoggerFactory
com.microfocus.sam.model.calc.ConsumptionCalculator
com.microfocus.sam.model.exception.ComplianceCalculateException
com.microfocus.sam.model.vo.compliance.ComplianceAnalysis
com.microfocus.sam.model.vo.compliance.NodeComplianceAnalysis
com.microfocus.sam.model.vo.compliance.PersonComplianceAnalysis
com.microfocus.sam.model.params.ParamPerUnit
com.microfocus.sam.model.params.ParamPerUnit$PropertyName
com.microfocus.sam.model.params.ParamPerHost
com.microfocus.sam.model.params.ParamPerOSE
com.microfocus.sam.model.params.ParamPerPerson
com.microfocus.sam.model.params.enums.CIValidationEnum
com.microfocus.sam.model.params.enums.PerCoreLicensingOptionEnum
com.microfocus.sam.model.vo.ci.Device
com.microfocus.sam.model.vo.ci.Host
com.microfocus.sam.model.vo.ci.VirtualMachine
com.microfocus.sam.model.vo.ci.VirtualizationTechEnum
com.microfocus.sam.model.vo.ci.Node
com.microfocus.sam.model.vo.ci.NodeTypeEnum
com.microfocus.sam.model.vo.ci.OSFamilyEnum
com.microfocus.sam.model.vo.ci.Processor
com.microfocus.sam.model.vo.ci.SoftwareInstance
com.microfocus.sam.model.vo.licenserule.Product
com.microfocus.sam.model.vo.licenserule.ProductVersion
com.microfocus.sam.model.vo.licenserule.ProductEditionEnum
com.microfocus.sam.model.vo.misc.LanguageEnum
com.microfocus.sam.model.vo.ext_ci.ExternalLicenseModel
com.microfocus.sam.model.vo.contract.ContractStatusEnum

The following primitive data types also work in the script:

long
int
boolean
double
float
byte
char
For classes whose package name contains the com.microfocus.sam prefix, see the following Classes and APIs for scripting section. For other classes, see the corresponding JDK documentation.

Classes and APIs for scripting
This section describes the classes and APIs for license rule scripting.


View Fullscreen
Packages
com.microfocus.sam.model.exception
com.microfocus.sam.model.params
com.microfocus.sam.model.vo.ci
com.microfocus.sam.model.vo.compliance
com.microfocus.sam.model.vo.misc

